<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Infinite Adventure</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #1a1a1a;
            color: #ffffff;
        }
        .game-container {
            display: flex;
            height: 100vh;
            overflow: hidden;
        }
        .sidebar {
            width: 300px;
            background-color: #2d2d2d;
            padding: 1rem;
            overflow-y: auto;
            border-right: 1px solid #444;
        }
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            position: relative;
            background-color: #1a1a1a;
        }
        .scene-container {
            flex: 1;
            background-color: #000;
            position: relative;
            overflow: hidden;
        }
        .scene-image {
            width: 100%;
            height: 100%;
            object-fit: contain;
            opacity: 0;
            transition: opacity 0.3s ease-in-out;
            position: absolute;
            top: 0;
            left: 0;
        }
        .scene-image.loaded {
            opacity: 1;
        }
        .loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: #ffffff;
            font-size: 1.5rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
            opacity: 0;
            transition: opacity 0.3s ease-in-out;
            z-index: 2;
        }
        .loading.show {
            opacity: 1;
        }
        .narrative-box {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background-color: rgba(0, 0, 0, 0.75);
            color: #ffffff;
            padding: 1.5rem;
            border-top: 2px solid #666;
            min-height: 120px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            box-shadow: 0 -4px 8px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease-in-out;
        }
        .narrative-box.hidden {
            opacity: 0;
            transform: translateY(100%);
        }
        .narrative-toggle {
            position: fixed;
            bottom: 30px;
            right: 30px;
            background-color: rgba(0, 0, 0, 0.7);
            color: #ffffff;
            border: 1px solid #666;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-weight: bold;
            z-index: 9999;
            font-size: 1rem;
        }
        .narrative-toggle:hover {
            background-color: rgba(0, 0, 0, 0.9);
            border-color: #888;
        }
        .narrative-text {
            font-size: 1.2rem;
            line-height: 1.5;
            margin: 0;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
            color: #ffffff;
            font-weight: 500;
        }
        .actions-container {
            padding: 1rem;
            background-color: #2d2d2d;
            border-top: 1px solid #444;
        }
        .action-button {
            margin-bottom: 0.5rem;
            width: 100%;
            text-align: left;
            background-color: #3d3d3d;
            border: 1px solid #555;
            color: #ffffff;
            padding: 0.75rem;
            border-radius: 4px;
            transition: all 0.2s ease;
        }
        .action-button:hover {
            background-color: #4d4d4d;
            border-color: #666;
        }
        .world-description {
            margin-bottom: 1rem;
            padding: 1rem;
            background-color: #2d2d2d;
            border-radius: 0.25rem;
            border: 1px solid #444;
            max-height: 200px;
            overflow-y: auto;
            display: none;
        }
        .world-description.show {
            display: block;
        }
        .world-description-btn {
            margin-bottom: 1rem;
            width: 100%;
            text-align: left;
            background-color: #3d3d3d;
            border: 1px solid #555;
            color: #ffffff;
            padding: 0.75rem;
            border-radius: 4px;
            transition: all 0.2s ease;
        }
        .world-description-btn:hover {
            background-color: #4d4d4d;
            border-color: #666;
        }
        .world-description-btn::after {
            content: '▼';
            float: right;
            transition: transform 0.3s ease;
        }
        .world-description-btn.collapsed::after {
            transform: rotate(-90deg);
        }
        .edit-btn {
            float: right;
            background: none;
            border: none;
            color: #666;
            cursor: pointer;
            padding: 0;
            margin-left: 10px;
        }
        .edit-btn:hover {
            color: #888;
        }
        .edit-form {
            display: none;
            margin-top: 1rem;
        }
        .edit-form.show {
            display: block;
        }
        .modal-content {
            background-color: #2d2d2d;
            color: #ffffff;
        }
        .modal-header {
            border-bottom: 1px solid #444;
            background-color: #1a1a1a;
        }
        .modal-footer {
            border-top: 1px solid #444;
            background-color: #1a1a1a;
        }
        .form-control {
            background-color: #3d3d3d;
            border: 1px solid #555;
            color: #ffffff;
        }
        .form-control:focus {
            background-color: #3d3d3d;
            border-color: #666;
            color: #ffffff;
            box-shadow: 0 0 0 0.25rem rgba(100, 100, 100, 0.25);
        }
        .form-label {
            color: #ffffff;
        }
        .btn-outline-light {
            color: #ffffff;
            border-color: #666;
            background-color: #3d3d3d;
        }
        .btn-outline-light:hover {
            background-color: #4d4d4d;
            border-color: #777;
        }
        .btn-primary {
            background-color: #4a6bff;
            border-color: #4a6bff;
        }
        .btn-primary:hover {
            background-color: #5b7cff;
            border-color: #5b7cff;
        }
        .form-select {
            background-color: #3d3d3d;
            border: 1px solid #555;
            color: #ffffff;
        }
        .form-select:focus {
            background-color: #3d3d3d;
            border-color: #666;
            color: #ffffff;
            box-shadow: 0 0 0 0.25rem rgba(100, 100, 100, 0.25);
        }
        .form-text {
            color: #999;
        }
        .custom-action-input {
            display: none;
            margin-top: 0.5rem;
        }
    </style>
</head>
<body class="bg-dark text-light">
    <!-- World Description Modal -->
    <div class="modal fade" id="worldModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create Your World</h5>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="worldLanguage" class="form-label">Narrator Language</label>
                        <select class="form-select" id="worldLanguage">
                            <option value="en">English</option>
                            <option value="es">Spanish</option>
                            <option value="fr">French</option>
                            <option value="de">German</option>
                            <option value="it">Italian</option>
                            <option value="pt">Portuguese</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="worldDescription" class="form-label">World Description</label>
                        <textarea class="form-control" id="worldDescription" rows="5" placeholder="Describe the world where your adventure takes place...">A medieval fantasy world with magic, dragons, and ancient ruins. The land is divided into several kingdoms, each with its own unique culture and traditions. Magic is rare but powerful, and those who can wield it are both respected and feared.</textarea>
                    </div>
                    <div class="mb-3">
                        <label for="playerDescription" class="form-label">Player Description</label>
                        <textarea class="form-control" id="playerDescription" rows="5" placeholder="Describe your character and their goals...">You are a young adventurer seeking to prove yourself. You have basic combat skills and a thirst for knowledge about the world's ancient magic. Your goal is to uncover the secrets of the lost civilization and become a renowned hero.</textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="startAdventure">Start Adventure</button>
                </div>
            </div>
        </div>
    </div>

    <div class="game-container">
        <div class="sidebar">
            <div class="mb-3">
                <button class="btn btn-outline-light w-100" id="newAdventure">New Adventure</button>
            </div>
            <div class="mb-3">
                <button class="world-description-btn" id="worldDescriptionBtn">World Description</button>
                <div class="world-description" id="worldDescriptionDisplay"></div>
                <button class="edit-btn" id="editWorldBtn">✏️</button>
                <div class="edit-form" id="editWorldForm">
                    <textarea class="form-control" id="editWorldDescription" rows="3"></textarea>
                    <button class="btn btn-outline-light w-100 mt-2" id="saveWorldEdit">Save Changes</button>
                </div>
            </div>
            <div class="mb-3">
                <button class="world-description-btn" id="playerDescriptionBtn">Player Description</button>
                <div class="world-description" id="playerDescriptionDisplay"></div>
                <button class="edit-btn" id="editPlayerBtn">✏️</button>
                <div class="edit-form" id="editPlayerForm">
                    <textarea class="form-control" id="editPlayerDescription" rows="3"></textarea>
                    <button class="btn btn-outline-light w-100 mt-2" id="savePlayerEdit">Save Changes</button>
                </div>
            </div>
            <div class="mb-3">
                <button class="world-description-btn" id="languageBtn">Narrator Language</button>
                <div class="world-description" id="languageDisplay"></div>
                <button class="edit-btn" id="editLanguageBtn">✏️</button>
                <div class="edit-form" id="editLanguageForm">
                    <select class="form-select" id="editLanguage">
                        <option value="en">English</option>
                        <option value="es">Spanish</option>
                        <option value="fr">French</option>
                        <option value="de">German</option>
                        <option value="it">Italian</option>
                        <option value="pt">Portuguese</option>
                    </select>
                    <button class="btn btn-outline-light w-100 mt-2" id="saveLanguageEdit">Save Changes</button>
                </div>
            </div>
            <div class="mb-3">
                <button class="btn btn-outline-light w-100" id="generateScene">Generate New Scene</button>
            </div>
            <div class="mb-3">
                <button class="btn btn-outline-light w-100" id="generateActions">Generate New Actions</button>
            </div>
            <div class="mb-3">
                <button class="btn btn-outline-light w-100" id="customActionBtn">Custom Action</button>
                <div class="custom-action-input" id="customActionInput">
                    <input type="text" class="form-control mt-2" id="customActionText" placeholder="Enter your custom action...">
                    <button class="btn btn-outline-light w-100 mt-2" id="submitCustomAction">Submit Action</button>
                </div>
            </div>
            <div id="actionsList"></div>
        </div>
        <div class="main-content">
            <div class="scene-container">
                <img id="sceneImage" class="scene-image" alt="Scene">
                <div class="loading" id="loadingIndicator">Loading...</div>
                <button class="narrative-toggle" id="narrativeToggle">Hide Text</button>
                <div class="narrative-box">
                    <p class="narrative-text" id="narrativeText"></p>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Initialize modal
        const worldModal = new bootstrap.Modal(document.getElementById('worldModal'));

        // Game state
        let gameState = {
            worldDescription: '',
            playerDescription: '',
            language: 'en',
            currentScene: '',
            actions: []
        };

        // Load saved game state
        const savedState = localStorage.getItem('infiniteAdventureState');
        if (savedState) {
            gameState = JSON.parse(savedState);
            document.getElementById('worldDescriptionDisplay').textContent = gameState.worldDescription;
            document.getElementById('playerDescriptionDisplay').textContent = gameState.playerDescription;
            document.getElementById('languageDisplay').textContent = getLanguageName(gameState.language);
            if (gameState.currentScene) {
                document.getElementById('sceneImage').src = gameState.currentScene;
                document.getElementById('sceneImage').classList.add('loaded');
            }
            document.getElementById('narrativeText').textContent = gameState.worldDescription;
            updateActionsList(gameState.actions);
        } else {
            worldModal.show();
        }

        function getLanguageName(code) {
            const languages = {
                'en': 'English',
                'es': 'Spanish',
                'fr': 'French',
                'de': 'German',
                'it': 'Italian',
                'pt': 'Portuguese'
            };
            return languages[code] || 'English';
        }

        // Edit button handlers
        document.getElementById('editWorldBtn').addEventListener('click', () => {
            const form = document.getElementById('editWorldForm');
            const textarea = document.getElementById('editWorldDescription');
            textarea.value = gameState.worldDescription;
            form.classList.toggle('show');
        });

        document.getElementById('editPlayerBtn').addEventListener('click', () => {
            const form = document.getElementById('editPlayerForm');
            const textarea = document.getElementById('editPlayerDescription');
            textarea.value = gameState.playerDescription;
            form.classList.toggle('show');
        });

        document.getElementById('editLanguageBtn').addEventListener('click', () => {
            const form = document.getElementById('editLanguageForm');
            const select = document.getElementById('editLanguage');
            select.value = gameState.language;
            form.classList.toggle('show');
        });

        // Save edit handlers
        document.getElementById('saveWorldEdit').addEventListener('click', async () => {
            const newDescription = document.getElementById('editWorldDescription').value;
            if (newDescription) {
                gameState.worldDescription = newDescription;
                document.getElementById('worldDescriptionDisplay').textContent = newDescription;
                document.getElementById('editWorldForm').classList.remove('show');
                await updateNarrative();
                localStorage.setItem('infiniteAdventureState', JSON.stringify(gameState));
            }
        });

        document.getElementById('savePlayerEdit').addEventListener('click', async () => {
            const newDescription = document.getElementById('editPlayerDescription').value;
            if (newDescription) {
                gameState.playerDescription = newDescription;
                document.getElementById('playerDescriptionDisplay').textContent = newDescription;
                document.getElementById('editPlayerForm').classList.remove('show');
                await updateNarrative();
                localStorage.setItem('infiniteAdventureState', JSON.stringify(gameState));
            }
        });

        document.getElementById('saveLanguageEdit').addEventListener('click', async () => {
            const newLanguage = document.getElementById('editLanguage').value;
            if (newLanguage) {
                gameState.language = newLanguage;
                document.getElementById('languageDisplay').textContent = getLanguageName(newLanguage);
                document.getElementById('editLanguageForm').classList.remove('show');
                await updateNarrative();
                localStorage.setItem('infiniteAdventureState', JSON.stringify(gameState));
            }
        });

        async function updateNarrative() {
            try {
                const configResponse = await fetch('/api/config');
                if (!configResponse.ok) {
                    throw new Error(`Failed to fetch configuration: ${configResponse.status}`);
                }
                const config = await configResponse.json();

                const response = await fetch('/api/ollama', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        prompt: `You are a narrator speaking in ${getLanguageName(gameState.language)}. Your task is to create a detailed setting based on this world description: ${gameState.worldDescription}\n\nPlayer character: ${gameState.playerDescription}\n\nIMPORTANT: All your responses must be in ${getLanguageName(gameState.language)}. Do not mix languages.`,
                        model: config.defaultOllamaModel,
                        role: 'narrator'
                    })
                });

                if (!response.ok) {
                    throw new Error(`Failed to update narrative: ${response.status}`);
                }

                const data = await response.json();
                const newNarrative = data.response.choices[0].message.content;
                document.getElementById('narrativeText').textContent = newNarrative;
                gameState.worldDescription = newNarrative;
                document.getElementById('worldDescriptionDisplay').textContent = newNarrative;
            } catch (error) {
                console.error('Error updating narrative:', error);
                alert('Failed to update narrative: ' + error.message);
            }
        }

        // World description button handler
        document.getElementById('worldDescriptionBtn').addEventListener('click', () => {
            const btn = document.getElementById('worldDescriptionBtn');
            const description = document.getElementById('worldDescriptionDisplay');
            btn.classList.toggle('collapsed');
            description.classList.toggle('show');
        });

        document.getElementById('playerDescriptionBtn').addEventListener('click', () => {
            const btn = document.getElementById('playerDescriptionBtn');
            const description = document.getElementById('playerDescriptionDisplay');
            btn.classList.toggle('collapsed');
            description.classList.toggle('show');
        });

        document.getElementById('languageBtn').addEventListener('click', () => {
            const btn = document.getElementById('languageBtn');
            const description = document.getElementById('languageDisplay');
            btn.classList.toggle('collapsed');
            description.classList.toggle('show');
        });

        // Start adventure button handler
        document.getElementById('startAdventure').addEventListener('click', async () => {
            const worldDescription = document.getElementById('worldDescription').value;
            const playerDescription = document.getElementById('playerDescription').value;
            const language = document.getElementById('worldLanguage').value;
            
            if (!worldDescription || !playerDescription) {
                alert('Please fill in both world and player descriptions!');
                return;
            }

            const loadingIndicator = document.getElementById('loadingIndicator');
            loadingIndicator.classList.add('show');
            worldModal.hide();

            try {
                // Get the default Ollama model from configuration
                const configResponse = await fetch('/api/config');
                if (!configResponse.ok) {
                    throw new Error(`Failed to fetch configuration: ${configResponse.status}`);
                }
                const config = await configResponse.json();
                
                if (!config.defaultOllamaModel) {
                    throw new Error('No default Ollama model configured. Please set one in the configuration page.');
                }

                // Generate enhanced world description
                const worldResponse = await fetch('/api/ollama', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        prompt: `You are a narrator speaking in ${getLanguageName(language)}. Your task is to create a detailed setting based on this world description: ${worldDescription}\n\nPlayer character: ${playerDescription}\n\nIMPORTANT: All your responses must be in ${getLanguageName(language)}. Do not mix languages.`,
                        model: config.defaultOllamaModel,
                        role: 'narrator'
                    })
                });

                if (!worldResponse.ok) {
                    throw new Error(`Failed to generate world description: ${worldResponse.status}`);
                }

                const worldData = await worldResponse.json();
                const enhancedWorldDescription = worldData.response.choices[0].message.content;
                
                // Update game state and narrative
                gameState.worldDescription = enhancedWorldDescription;
                gameState.playerDescription = playerDescription;
                gameState.language = language;
                document.getElementById('narrativeText').textContent = enhancedWorldDescription;
                document.getElementById('worldDescriptionDisplay').textContent = enhancedWorldDescription;
                document.getElementById('playerDescriptionDisplay').textContent = playerDescription;
                document.getElementById('languageDisplay').textContent = getLanguageName(language);
                
                // Generate initial scene and actions in parallel
                await Promise.all([
                    generateScene(config.defaultOllamaModel),
                    generateActions(config.defaultOllamaModel)
                ]);
                
                // Save state
                localStorage.setItem('infiniteAdventureState', JSON.stringify(gameState));
                
            } catch (error) {
                console.error('Error starting adventure:', error);
                alert('Failed to start adventure: ' + error.message);
                worldModal.show();
            } finally {
                loadingIndicator.classList.remove('show');
            }
        });

        // Generate scene function
        async function generateScene(model) {
            const loadingIndicator = document.getElementById('loadingIndicator');
            const sceneImage = document.getElementById('sceneImage');
            
            // Show loading
            loadingIndicator.classList.add('show');
            sceneImage.classList.remove('loaded');
            
            try {
                // Generate scene description
                const sceneResponse = await fetch('/api/ollama', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        prompt: `Generate a detailed scene description based on this world: ${gameState.worldDescription}`,
                        model: model,
                        role: 'narrator'
                    })
                });

                if (!sceneResponse.ok) {
                    throw new Error(`Failed to generate scene description: ${sceneResponse.status}`);
                }

                const sceneData = await sceneResponse.json();
                const sceneDescription = sceneData.response.choices[0].message.content;
                
                // Generate image from scene description
                const imageResponse = await fetch('/api/generate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        prompt: sceneDescription,
                        negative: 'blurry, low quality, distorted, ugly',
                        width: 1024,
                        height: 576
                    })
                });

                if (!imageResponse.ok) {
                    throw new Error(`Failed to generate image: ${imageResponse.status}`);
                }

                const imageData = await imageResponse.json();
                
                if (imageData.success) {
                    // Add timestamp to force browser to reload the image
                    sceneImage.src = imageData.imagePath + '?t=' + Date.now();
                    sceneImage.classList.add('loaded');
                    gameState.currentScene = imageData.imagePath;
                } else {
                    throw new Error('Failed to generate image: ' + (imageData.error || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error generating scene:', error);
                alert('Failed to generate scene: ' + error.message);
                throw error;
            } finally {
                loadingIndicator.classList.remove('show');
            }
        }

        // Generate actions function
        async function generateActions(model) {
            try {
                const response = await fetch('/api/ollama', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        prompt: `You are a narrator speaking in ${getLanguageName(gameState.language)}. Generate 4 possible actions for the player in this world: ${gameState.worldDescription}. Current scene: ${gameState.currentScene ? 'An image is displayed' : 'No image yet'}. Player character: ${gameState.playerDescription}\n\nIMPORTANT: All your responses must be in ${getLanguageName(gameState.language)}. Do not mix languages. Format each action as a short, clear command.`,
                        model: model,
                        role: 'narrator'
                    })
                });

                if (!response.ok) {
                    throw new Error(`Failed to generate actions: ${response.status}`);
                }

                const data = await response.json();
                const actionsText = data.response.choices[0].message.content;
                const actions = actionsText.split('\n').filter(action => action.trim());
                
                gameState.actions = actions;
                updateActionsList(actions);
            } catch (error) {
                console.error('Error generating actions:', error);
                alert('Failed to generate actions: ' + error.message);
                throw error;
            }
        }

        // Update actions list
        function updateActionsList(actions) {
            const actionsList = document.getElementById('actionsList');
            actionsList.innerHTML = '';
            
            actions.forEach(action => {
                const button = document.createElement('button');
                button.className = 'btn btn-outline-light action-button';
                button.textContent = action;
                button.addEventListener('click', () => handleAction(action));
                actionsList.appendChild(button);
            });
        }

        // Handle action selection
        async function handleAction(action) {
            const loadingIndicator = document.getElementById('loadingIndicator');
            const sceneImage = document.getElementById('sceneImage');
            
            // Show loading
            loadingIndicator.classList.add('show');
            sceneImage.classList.remove('loaded');
            
            try {
                // Get the default Ollama model from configuration
                const configResponse = await fetch('/api/config');
                if (!configResponse.ok) {
                    throw new Error(`Failed to fetch configuration: ${configResponse.status}`);
                }
                const config = await configResponse.json();
                
                if (!config.defaultOllamaModel) {
                    throw new Error('No default Ollama model configured. Please set one in the configuration page.');
                }

                // Generate new scene based on action
                const sceneResponse = await fetch('/api/ollama', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        prompt: `You are a narrator speaking in ${getLanguageName(gameState.language)}. Based on this world: ${gameState.worldDescription} and the action "${action}", describe what happens next. Player character: ${gameState.playerDescription}\n\nIMPORTANT: All your responses must be in ${getLanguageName(gameState.language)}. Do not mix languages.`,
                        model: config.defaultOllamaModel,
                        role: 'narrator'
                    })
                });

                if (!sceneResponse.ok) {
                    throw new Error(`Failed to generate scene description: ${sceneResponse.status}`);
                }

                const sceneData = await sceneResponse.json();
                const sceneDescription = sceneData.response.choices[0].message.content;
                
                // Update narrative
                document.getElementById('narrativeText').textContent = sceneDescription;
                
                // Generate new image
                const imageResponse = await fetch('/api/generate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        prompt: sceneDescription,
                        negative: 'blurry, low quality, distorted, ugly',
                        width: 1024,
                        height: 576
                    })
                });

                if (!imageResponse.ok) {
                    throw new Error(`Failed to generate image: ${imageResponse.status}`);
                }

                const imageData = await imageResponse.json();
                
                if (imageData.success) {
                    // Add timestamp to force browser to reload the image
                    sceneImage.src = imageData.imagePath + '?t=' + Date.now();
                    sceneImage.classList.add('loaded');
                    gameState.currentScene = imageData.imagePath;
                    
                    // Generate new actions
                    await generateActions(config.defaultOllamaModel);
                    
                    // Save state
                    localStorage.setItem('infiniteAdventureState', JSON.stringify(gameState));
                } else {
                    throw new Error('Failed to generate image: ' + (imageData.error || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error handling action:', error);
                alert('Failed to process action: ' + error.message);
            } finally {
                loadingIndicator.classList.remove('show');
            }
        }

        // Event listeners for manual generation
        document.getElementById('generateScene').addEventListener('click', async () => {
            try {
                const configResponse = await fetch('/api/config');
                if (!configResponse.ok) {
                    throw new Error(`Failed to fetch configuration: ${configResponse.status}`);
                }
                const config = await configResponse.json();
                await generateScene(config.defaultOllamaModel);
            } catch (error) {
                console.error('Error generating scene:', error);
                alert('Failed to generate scene: ' + error.message);
            }
        });

        // Custom Action button handler
        document.getElementById('customActionBtn').addEventListener('click', () => {
            const customActionInput = document.getElementById('customActionInput');
            customActionInput.style.display = customActionInput.style.display === 'none' ? 'block' : 'none';
        });

        // Generate Actions button handler
        document.getElementById('generateActions').addEventListener('click', async () => {
            try {
                const configResponse = await fetch('/api/config');
                if (!configResponse.ok) {
                    throw new Error(`Failed to fetch configuration: ${configResponse.status}`);
                }
                const config = await configResponse.json();
                await generateActions(config.defaultOllamaModel);
            } catch (error) {
                console.error('Error generating actions:', error);
                alert('Failed to generate actions: ' + error.message);
            }
        });

        // Submit Custom Action handler
        document.getElementById('submitCustomAction').addEventListener('click', async () => {
            const customAction = document.getElementById('customActionText').value.trim();
            if (!customAction) {
                alert('Please enter a custom action!');
                return;
            }
            
            // Hide the custom action input
            document.getElementById('customActionInput').style.display = 'none';
            
            // Clear the input
            document.getElementById('customActionText').value = '';
            
            // Process the custom action
            await handleAction(customAction);
        });

        // New Adventure button handler
        document.getElementById('newAdventure').addEventListener('click', () => {
            // Clear local storage
            localStorage.removeItem('infiniteAdventureState');
            
            // Reset game state
            gameState = {
                worldDescription: '',
                playerDescription: '',
                language: 'en',
                currentScene: '',
                actions: []
            };
            
            // Clear UI
            document.getElementById('worldDescriptionDisplay').textContent = '';
            document.getElementById('sceneImage').style.display = 'none';
            document.getElementById('narrativeText').textContent = '';
            document.getElementById('actionsList').innerHTML = '';
            
            // Show world description modal
            worldModal.show();
        });

        // Narrative text toggle handler
        document.getElementById('narrativeToggle').addEventListener('click', () => {
            const narrativeBox = document.getElementById('narrativeText').parentElement;
            const toggleButton = document.getElementById('narrativeToggle');
            narrativeBox.classList.toggle('hidden');
            toggleButton.textContent = narrativeBox.classList.contains('hidden') ? 'Show Text' : 'Hide Text';
        });
    </script>
</body>
</html> 