<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ollama API Test</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .container {
            max-width: 800px;
            margin-top: 2rem;
        }
        .response-area {
            min-height: 200px;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.25rem;
            padding: 1rem;
            margin-top: 1rem;
            white-space: pre-wrap;
        }
        .conversation {
            margin-top: 2rem;
        }
        .message {
            margin-bottom: 1rem;
            padding: 1rem;
            border-radius: 0.25rem;
        }
        .message.user {
            background-color: #e3f2fd;
            margin-left: 2rem;
        }
        .message.assistant {
            background-color: #f5f5f5;
            margin-right: 2rem;
        }
        .message.system {
            background-color: #fff3e0;
            font-style: italic;
        }
        .message .role {
            font-weight: bold;
            margin-bottom: 0.5rem;
        }
        .role-presets {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }
        .role-preset {
            padding: 0.5rem 1rem;
            border: 1px solid #dee2e6;
            border-radius: 0.25rem;
            cursor: pointer;
            background-color: white;
            transition: all 0.2s;
        }
        .role-preset:hover {
            background-color: #f8f9fa;
        }
        .role-preset.active {
            background-color: #e3f2fd;
            border-color: #2196F3;
        }
        .custom-role-input {
            display: none;
            margin-top: 1rem;
        }
        .custom-role-input.show {
            display: block;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="mb-4">Ollama API Test</h1>
        
        <div class="card">
            <div class="card-body">
                <form id="ollamaForm">
                    <div class="mb-3">
                        <label class="form-label">Role Presets</label>
                        <div class="role-presets">
                            <div class="role-preset" data-role="sd-prompt" data-prompt="You are a Stable Diffusion prompt generator. Convert descriptions into optimized keyword-based prompts. Use parentheses for emphasis, commas for separation, and avoid long sentences. Focus on key visual elements and artistic styles. Example format: (detailed face), (asian female), (warrior armor), (dynamic pose), (epic lighting), (digital art), (highly detailed), (sharp focus).">SD Prompt Generator</div>
                            <div class="role-preset" data-role="char-generator" data-prompt="You are a character generator that creates detailed character profiles in JSON format. For any character description, generate a JSON object with: name, physical traits (age, height, build, distinguishing features), and attributes (strength, intelligence, agility, charisma, each 1-10). Example format: { 'name': 'Yong Lua', 'physical': { 'age': 28, 'height': '5\'6\"', 'build': 'athletic', 'features': ['scar on left cheek', 'golden eyes'] }, 'attributes': { 'strength': 8, 'intelligence': 6, 'agility': 9, 'charisma': 7 } }. Always respond with valid JSON only.">Character Generator</div>
                            <div class="role-preset" data-role="custom" data-prompt="">Custom Role</div>
                        </div>
                        <div id="customRoleInput" class="custom-role-input">
                            <label for="customRolePrompt" class="form-label">Custom Role Prompt</label>
                            <textarea class="form-control" id="customRolePrompt" rows="2" placeholder="Enter your custom role prompt here..."></textarea>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="prompt" class="form-label">Message</label>
                        <textarea class="form-control" id="prompt" rows="3" required>What is the capital of France?</textarea>
                    </div>
                    <div class="mb-3">
                        <label for="model" class="form-label">Model</label>
                        <select class="form-select" id="model" required>
                            <% if (models && models.length > 0) { %>
                                <% models.forEach(function(model) { %>
                                    <option value="<%= model %>"><%= model %></option>
                                <% }); %>
                            <% } else { %>
                                <option value="" disabled>No models available</option>
                            <% } %>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary">Send Message</button>
                </form>
            </div>
        </div>

        <div class="mt-4">
            <h4>Conversation</h4>
            <div id="conversation" class="conversation">
                <!-- Conversation messages will be added here -->
            </div>
        </div>

        <div class="mt-4">
            <h4>Raw Response</h4>
            <div id="response" class="response-area"></div>
        </div>
    </div>

    <script>
        let conversationHistory = [];
        let currentRole = 'sd-prompt';
        let currentRolePrompt = 'You are a Stable Diffusion prompt generator. Convert descriptions into optimized keyword-based prompts. Use parentheses for emphasis, commas for separation, and avoid long sentences. Focus on key visual elements and artistic styles. Example format: (detailed face), (asian female), (warrior armor), (dynamic pose), (epic lighting), (digital art), (highly detailed), (sharp focus).';

        // Handle role preset selection
        document.querySelectorAll('.role-preset').forEach(preset => {
            preset.addEventListener('click', () => {
                // Remove active class from all presets
                document.querySelectorAll('.role-preset').forEach(p => p.classList.remove('active'));
                // Add active class to clicked preset
                preset.classList.add('active');
                
                currentRole = preset.dataset.role;
                
                if (currentRole === 'custom') {
                    document.getElementById('customRoleInput').classList.add('show');
                    currentRolePrompt = document.getElementById('customRolePrompt').value;
                } else {
                    document.getElementById('customRoleInput').classList.remove('show');
                    currentRolePrompt = preset.dataset.prompt;
                }
            });
        });

        // Handle custom role prompt changes
        document.getElementById('customRolePrompt').addEventListener('input', (e) => {
            currentRolePrompt = e.target.value;
        });

        // Set default active preset
        document.querySelector('.role-preset[data-role="sd-prompt"]').classList.add('active');

        function addMessageToConversation(role, content) {
            const conversationDiv = document.getElementById('conversation');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${role}`;
            
            const roleSpan = document.createElement('div');
            roleSpan.className = 'role';
            roleSpan.textContent = role.charAt(0).toUpperCase() + role.slice(1);
            
            const contentDiv = document.createElement('div');
            contentDiv.textContent = content;
            
            messageDiv.appendChild(roleSpan);
            messageDiv.appendChild(contentDiv);
            conversationDiv.appendChild(messageDiv);
            
            // Scroll to the bottom of the conversation
            conversationDiv.scrollTop = conversationDiv.scrollHeight;
        }

        document.getElementById('ollamaForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const prompt = document.getElementById('prompt').value;
            const model = document.getElementById('model').value;
            const responseArea = document.getElementById('response');
            
            try {
                responseArea.textContent = 'Sending request...';
                
                // Add system message if it's the first message or role has changed
                if (conversationHistory.length === 0 || 
                    (conversationHistory[0].role === 'system' && 
                     conversationHistory[0].content !== currentRolePrompt)) {
                    conversationHistory = [{
                        role: 'system',
                        content: currentRolePrompt
                    }];
                }
                
                addMessageToConversation('user', prompt);
                
                const response = await fetch('/api/ollama', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        prompt,
                        model,
                        role: 'user',
                        conversation: conversationHistory,
                        stream: false
                    })
                });
                
                const data = await response.json();
                conversationHistory = data.conversation;
                
                // Add assistant's response to the conversation
                const lastMessage = data.conversation[data.conversation.length - 1];
                addMessageToConversation(lastMessage.role, lastMessage.content);
                
                responseArea.textContent = JSON.stringify(data.response, null, 2);
            } catch (error) {
                responseArea.textContent = `Error: ${error.message}`;
            }
        });
    </script>
</body>
</html> 