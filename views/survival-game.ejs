<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Post-Apocalyptic Survival</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            min-height: 100vh;
            background-color: #1a1a1a;
            color: #ffffff;
            display: flex;
            overflow: hidden;
        }

        .sidebar {
            width: 300px;
            min-width: 250px;
            max-width: 400px;
            background-color: #2a2a2a;
            padding: 1rem;
            display: flex;
            flex-direction: column;
            border-right: 1px solid #3a3a3a;
            overflow-y: auto;
            height: 100vh;
            transition: width 0.3s ease;
        }

        @media (max-width: 768px) {
            .sidebar {
                width: 250px;
                position: fixed;
                left: -250px;
                z-index: 1000;
                transition: left 0.3s ease;
            }

            .sidebar.active {
                left: 0;
            }

            .main-content {
                margin-left: 0 !important;
            }

            .game-title {
                font-size: 1.2rem;
            }

            .button {
                padding: 0.6rem 1rem;
                font-size: 0.9rem;
            }

            .stat-item {
                font-size: 0.9rem;
            }
        }

        @media (max-width: 480px) {
            .sidebar {
                width: 100%;
                left: -100%;
            }

            .game-controls {
                flex-direction: row;
                flex-wrap: wrap;
                gap: 0.5rem;
            }

            .button {
                flex: 1 1 calc(50% - 0.5rem);
                min-width: 120px;
            }
        }

        .main-content {
            flex: 1;
            position: relative;
            overflow: hidden;
            height: 100vh;
            margin-left: 0;
            transition: margin-left 0.3s ease;
        }

        .game-title {
            font-size: 1.5rem;
            color: #ff6b6b;
            margin: 0 0 1rem 0;
            padding-bottom: 1rem;
            border-bottom: 1px solid #3a3a3a;
            position: relative;
        }

        .game-controls {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .button {
            padding: 0.8rem 1.5rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
            text-align: center;
        }

        .start-button {
            background-color: #4CAF50;
            color: white;
        }

        .reset-button {
            position: absolute;
            top: 0;
            right: 0;
            background-color: #f44336;
            color: white;
            padding: 0.3rem 0.6rem;
            font-size: 0.8rem;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            transform: translateY(-5px);
        }

        .reset-button:hover {
            background-color: #d32f2f;
        }

        .regen-button {
            position: absolute;
            top: 0;
            right: 30px;
            background-color: #9C27B0;
            color: white;
            padding: 0.3rem 0.6rem;
            font-size: 0.8rem;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            transform: translateY(-5px);
        }

        .regen-button:hover {
            background-color: #7B1FA2;
        }

        .explore-button {
            background-color: #2196F3;
            color: white;
        }

        .sleep-button {
            background-color: #00C851;
            color: white;
            margin-top: 0.5rem;
        }

        .food-button {
            background-color: #ffbb33;
            color: white;
            margin-top: 0.5rem;
        }

        .water-button {
            background-color: #33b5e5;
            color: white;
            margin-top: 0.5rem;
        }

        .survivor-button {
            background-color: #FF6B6B;
            color: white;
            margin-top: 0.5rem;
        }

        .button:hover {
            opacity: 0.9;
            transform: translateY(-2px);
        }

        .button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .button:disabled:hover {
            opacity: 0.5;
            transform: none;
        }

        .area-link {
            position: absolute;
            padding: 1rem;
            background-color: rgba(0, 0, 0, 0.7);
            border: 2px solid #2196F3;
            border-radius: 4px;
            color: white;
            text-decoration: none;
            font-weight: bold;
            transition: all 0.3s ease;
            z-index: 3;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.5rem;
            min-width: 120px;
        }

        .area-link:hover {
            background-color: rgba(0, 0, 0, 0.9);
            transform: scale(1.05);
        }

        .area-link .area-thumb {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            border: 2px solid #2196F3;
            overflow: hidden;
            transition: all 0.3s ease;
            background-color: rgba(0, 0, 0, 0.5);
            transform-origin: center;
            position: relative;
            margin-top: 0.5rem;
        }

        .area-link:hover .area-thumb {
            transform: scale(2);
            box-shadow: 0 0 20px rgba(33, 150, 243, 0.5);
        }

        .area-link .area-thumb img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            object-position: top;
            transition: transform 0.3s ease;
        }

        .area-link:hover .area-thumb img {
            transform: scale(1.1);
        }

        .area-link.top-left {
            top: 20px;
            left: 20px;
        }

        .area-link.top-right {
            top: 20px;
            right: 20px;
        }

        .area-link.bottom-left {
            bottom: 80px;
            left: 20px;
        }

        .area-link.bottom-right {
            bottom: 80px;
            right: 20px;
        }

        .nothing-found {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.8);
            padding: 1.5rem;
            border-radius: 4px;
            border: 2px solid #ff6b6b;
            color: white;
            text-align: center;
            z-index: 3;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .game-stats {
            background-color: #333333;
            padding: 1rem;
            border-radius: 4px;
            margin-top: auto;
        }

        .player-character {
            background-color: #333333;
            padding: 1rem;
            border-radius: 4px;
            margin-top: 1rem;
            border-top: 2px solid #ff6b6b;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .player-character:hover {
            background-color: #3a3a3a;
        }

        .player-character-image {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            border: 2px solid #ff6b6b;
            margin: 0 auto 1rem;
            overflow: hidden;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .player-character-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            object-position: top;
            transition: transform 0.3s ease;
        }

        .player-character-image:hover {
            transform: scale(1.05);
            box-shadow: 0 0 20px rgba(255, 107, 107, 0.5);
        }

        .player-character-image:hover img {
            transform: scale(1.1);
        }

        .player-character-name {
            color: #ff6b6b;
            font-weight: bold;
            text-align: center;
            margin-bottom: 0.5rem;
        }

        .player-character-attributes {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .player-character-attribute {
            background-color: #2a2a2a;
            padding: 0.5rem;
            border-radius: 4px;
            text-align: center;
        }

        .player-character-attribute-label {
            color: #ff6b6b;
            font-size: 0.8rem;
            margin-bottom: 0.2rem;
        }

        .player-character-attribute-value {
            color: #ffffff;
            font-weight: bold;
        }

        .player-character-description {
            color: #cccccc;
            font-size: 0.9rem;
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid #3a3a3a;
        }

        .stat-item {
            margin-bottom: 0.5rem;
        }

        .stat-label {
            color: #ff6b6b;
            font-weight: bold;
        }

        .stat-value {
            color: #ffffff;
        }

        .stat-bar {
            width: 100%;
            height: 10px;
            background-color: #1a1a1a;
            border-radius: 5px;
            margin-top: 0.2rem;
            overflow: hidden;
        }

        .stat-bar-fill {
            height: 100%;
            transition: width 0.3s ease;
        }

        .health-bar {
            background-color: #ff4444;
        }

        .hunger-bar {
            background-color: #ffbb33;
        }

        .thirst-bar {
            background-color: #33b5e5;
        }

        .stamina-bar {
            background-color: #00C851;
        }

        .game-over {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.9);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            color: #ff4444;
            text-align: center;
            padding: 2rem;
        }

        .game-over h2 {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        .game-over p {
            font-size: 1.5rem;
            margin-bottom: 2rem;
            color: #ffffff;
        }

        .main-content {
            flex: 1;
            position: relative;
            overflow: hidden;
        }

        .location-image {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            z-index: 1;
        }

        .location-description {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background-color: rgba(0, 0, 0, 0.8);
            padding: 1.5rem;
            z-index: 2;
            border-top: 2px solid #ff6b6b;
        }

        .location-description h2 {
            color: #ff6b6b;
            margin: 0 0 0.5rem 0;
            font-size: 1.5rem;
        }

        .location-description p {
            color: #cccccc;
            margin: 0;
            line-height: 1.6;
        }

        .game-state {
            display: none;
            height: 100%;
        }

        .start-screen {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
            align-items: center;
            background-color: rgba(0, 0, 0, 0.9);
            z-index: 3;
            padding: 2rem;
            text-align: center;
            overflow-y: auto;
            min-height: 100vh;
        }

        .character-form {
            background-color: #2a2a2a;
            padding: 2rem;
            border-radius: 8px;
            border: 2px solid #ff6b6b;
            width: 90%;
            max-width: 600px;
            margin: 2rem 0;
            text-align: left;
            overflow-y: visible;
        }

        .character-form h3 {
            color: #ff6b6b;
            margin-bottom: 1.5rem;
            text-align: center;
            top: 0;
            background-color: #2a2a2a;
            padding: 1rem 0;
            z-index: 1;
        }

        .form-group textarea {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #3a3a3a;
            border-radius: 4px;
            background-color: #1a1a1a;
            color: #ffffff;
            resize: vertical;
            min-height: 100px;
        }

        .start-screen h2 {
            color: #ff6b6b;
            font-size: 2.5rem;
            margin-bottom: 1.5rem;
            top: 0;
            background-color: rgba(0, 0, 0, 0.9);
            padding: 1rem 0;
            z-index: 2;
            width: 100%;
        }

        .start-screen p {
            color: #cccccc;
            margin-bottom: 2rem;
            line-height: 1.6;
            max-width: 600px;
            font-size: 1.1rem;
            top: 0;
            background-color: rgba(0, 0, 0, 0.9);
            padding: 1rem 0;
            z-index: 2;
            width: 100%;
        }

        .start-screen .button {
            padding: 1rem 2rem;
            font-size: 1.2rem;
            margin-top: 1rem;
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            color: #ffffff;
            text-align: center;
            padding: 2rem;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #ff6b6b;
            border-top-color: transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 1rem;
        }

        .loading-message {
            font-size: 1.2rem;
            margin-bottom: 0.5rem;
            color: #ff6b6b;
        }

        .loading-description {
            font-size: 1rem;
            color: #cccccc;
            max-width: 400px;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .npc-container {
            position: absolute;
            display: flex;
            gap: 1rem;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 2;
        }

        .npc-wrapper {
            position: relative;
            width: 80px;
            height: 80px;
            transition: all 0.3s ease;
            z-index: 1;
        }

        .npc-wrapper:hover {
            transform: scale(4);
            z-index: 100;
        }

        .npc {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            border: 2px solid #ff6b6b;
            overflow: hidden;
            cursor: pointer;
            transition: all 0.3s ease;
            background-color: rgba(0, 0, 0, 0.5);
            transform-origin: center;
        }

        .npc:hover {
            box-shadow: 0 0 20px rgba(255, 107, 107, 0.5);
        }

        .npc img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            object-position: top;
            transition: transform 0.3s ease;
        }

        .npc:hover img {
            transform: scale(1.1);
        }

        .npc-actions {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            display: none;
            z-index: 101;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }

        .npc-wrapper:hover .npc-actions,
        .npc-actions:hover {
            display: block;
        }

        .npc-action-button {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            border: none;
            background-color: #2a2a2a;
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1rem;
            transition: all 0.3s ease;
            position: absolute;
            pointer-events: auto;
        }

        .npc-action-button:hover {
            background-color: #ff6b6b;
            transform: scale(1.2);
        }

        .npc-action-button.regen {
            top: -30px;
            left: 50%;
            transform: translateX(-50%);
        }

        .npc-action-button.talk {
            top: 50%;
            right: -30px;
            transform: translateY(-50%);
        }

        .npc-action-button.trade {
            bottom: -30px;
            left: 50%;
            transform: translateX(-50%);
        }

        .npc-action-button.fight {
            top: 50%;
            left: -30px;
            transform: translateY(-50%);
        }

        .npc-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.9);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .npc-modal-content {
            background-color: #1a1a1a;
            padding: 2rem;
            border-radius: 8px;
            border: 2px solid #ff6b6b;
            width: 95vw;
            max-width: 95vw;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
            color: #ffffff;
            display: flex;
            gap: 2rem;
        }

        .npc-modal-close {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: none;
            border: none;
            color: #ff6b6b;
            font-size: 1.5rem;
            cursor: pointer;
            transition: color 0.3s ease;
            z-index: 2;
        }

        .npc-modal-close:hover {
            color: #ff4444;
        }

        .npc-modal-left {
            flex: 1.5;
            width: 50vw;
            max-width: 50vw;
        }

        .npc-modal-right {
            flex: 1;
            width: 30vw;
            max-width: 30vw;
        }

        .npc-modal-image {
            width: 100%;
            aspect-ratio: 9/16;
            border-radius: 8px;
            overflow: hidden;
            border: 2px solid #ff6b6b;
            margin-bottom: 1rem;
            background-color: #2a2a2a;
        }

        .npc-modal-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            object-position: top;
        }

        .npc-modal-header {
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #3a3a3a;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .npc-modal-name {
            font-size: 1.8rem;
            color: #ff6b6b;
            margin: 0;
            font-weight: bold;
            flex: 1;
        }

        .npc-modal-regen {
            background: none;
            border: none;
            color: #ff6b6b;
            font-size: 1.2rem;
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 50%;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 32px;
            height: 32px;
        }

        .npc-modal-regen:hover {
            background-color: #ff6b6b;
            color: white;
            transform: scale(1.1);
        }

        .npc-modal-description {
            color: #cccccc;
            margin-bottom: 1rem;
            line-height: 1.6;
        }

        .npc-modal-attributes {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
            margin: 1.5rem 0;
        }

        .npc-modal-attribute {
            background-color: #2a2a2a;
            padding: 1rem;
            border-radius: 4px;
            border: 1px solid #3a3a3a;
        }

        .npc-modal-attribute-label {
            color: #ff6b6b;
            font-weight: bold;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .npc-modal-attribute-value {
            color: #ffffff;
            font-size: 1.1rem;
        }

        .npc-modal-attribute-bar {
            width: 100%;
            height: 8px;
            background-color: #1a1a1a;
            border-radius: 4px;
            margin-top: 0.5rem;
            overflow: hidden;
        }

        .npc-modal-attribute-fill {
            height: 100%;
            background-color: #ff6b6b;
            transition: width 0.3s ease;
        }

        .npc-modal-background {
            color: #cccccc;
            margin: 1.5rem 0;
            padding: 1.5rem 0;
            border-top: 1px solid #3a3a3a;
            line-height: 1.6;
        }

        .npc-modal-additional {
            color: #cccccc;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid #3a3a3a;
            line-height: 1.6;
        }

        @media (max-width: 768px) {
            .npc-modal-content {
                flex-direction: column;
                padding: 1.5rem;
            }
            
            .npc-modal-left {
                width: 100%;
                max-width: 100%;
            }
            
            .npc-modal-right {
                width: 100%;
                max-width: 100%;
            }
        }

        @media (max-width: 480px) {
            .npc-modal-content {
                padding: 1rem;
            }
            
            .npc-modal-image {
                aspect-ratio: 3/4;
            }
        }

        .location-container {
            position: relative;
            width: 100%;
            height: 100%;
            overflow: hidden;
        }

        .location-container img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .location-info {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background-color: rgba(0, 0, 0, 0.8);
            padding: 1.5rem;
            z-index: 2;
            border-top: 2px solid #ff6b6b;
        }

        .location-info h2 {
            color: #ff6b6b;
            margin: 0 0 0.5rem 0;
            font-size: 1.5rem;
        }

        .location-info p {
            color: #cccccc;
            margin: 0;
            line-height: 1.6;
        }

        .menu-toggle {
            display: none;
            position: absolute;
            top: 10px;
            right: 10px;
            background: none;
            border: none;
            color: #ffffff;
            font-size: 1.5rem;
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .menu-toggle:hover {
            color: #ff4444;
        }

        .description-toggle {
            position: absolute;
            bottom: 10px;
            right: 10px;
            background: none;
            border: none;
            color: #ffffff;
            font-size: 1.2rem;
            cursor: pointer;
            transition: color 0.3s ease;
            z-index: 3;
        }

        .regen-area-button {
            position: absolute;
            bottom: 10px;
            right: 50px;
            background: none;
            border: none;
            color: #ffffff;
            font-size: 1.2rem;
            cursor: pointer;
            transition: color 0.3s ease;
            z-index: 3;
        }

        .description-toggle:hover,
        .regen-area-button:hover {
            color: #ff4444;
        }

        .location-info.hidden {
            display: none;
        }

        .area-thumb {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            border: 2px solid #2196F3;
            overflow: hidden;
            cursor: pointer;
            transition: all 0.3s ease;
            background-color: rgba(0, 0, 0, 0.5);
            transform-origin: center;
            position: absolute;
        }

        .area-thumb:hover {
            transform: scale(4);
            z-index: 10;
            box-shadow: 0 0 20px rgba(33, 150, 243, 0.5);
        }

        .area-thumb img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .area-thumb:hover img {
            transform: scale(1.1);
        }

        .area-thumb.top-left {
            top: 20px;
            left: 20px;
        }

        .area-thumb.top-right {
            top: 20px;
            right: 20px;
        }

        .area-thumb.bottom-left {
            bottom: 80px;
            left: 20px;
        }

        .area-thumb.bottom-right {
            bottom: 80px;
            right: 20px;
        }

        .npc-modal-section {
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #3a3a3a;
        }

        .npc-modal-section:last-child {
            border-bottom: none;
        }

        .npc-modal-section-title {
            color: #ff6b6b;
            font-size: 1.2rem;
            margin-bottom: 1rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .character-form {
            background-color: #2a2a2a;
            padding: 2rem;
            border-radius: 8px;
            border: 2px solid #ff6b6b;
            width: 90%;
            max-width: 600px;
            margin: 2rem 0;
            text-align: left;
        }

        .character-form h3 {
            color: #ff6b6b;
            margin-bottom: 1.5rem;
            text-align: center;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            color: #ffffff;
            margin-bottom: 0.5rem;
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #3a3a3a;
            border-radius: 4px;
            background-color: #1a1a1a;
            color: #ffffff;
        }

        .form-row {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
        }

        .attribute-slider {
            width: 100%;
            margin-top: 0.5rem;
        }

        .attribute-value {
            color: #ff6b6b;
            font-weight: bold;
            text-align: right;
        }

        .character-preview {
            margin-top: 2rem;
            text-align: center;
        }

        .character-preview img {
            width: 200px;
            height: 200px;
            border-radius: 50%;
            border: 2px solid #ff6b6b;
            margin-bottom: 1rem;
            object-fit: cover;
            object-position: top;
            transition: all 0.3s ease;
        }

        .character-preview h4 {
            color: #ff6b6b;
            margin-bottom: 0.5rem;
        }

        .character-preview p {
            color: #cccccc;
            margin-bottom: 0.5rem;
        }

        .character-preview img:hover {
            transform: scale(1.05);
            box-shadow: 0 0 20px rgba(255, 107, 107, 0.5);
        }

        .generate-button {
            background-color: #9C27B0;
            color: white;
            margin-bottom: 1rem;
        }

        .generate-button:hover {
            background-color: #7B1FA2;
        }

        .reset-game-button {
            background-color: #d32f2f;
            color: white;
            padding: 0.8rem 1.5rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
            text-align: center;
            margin-top: auto;
            margin-bottom: 1rem;
            width: 100%;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .reset-game-button:hover {
            background-color: #b71c1c;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }

        .reset-game-button:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
    </style>
</head>
<body>
    <div class="sidebar">
        <h1 class="game-title">
            Post-Apocalyptic Survival
        </h1>
        <div class="game-controls">
            <button id="exploreButton" class="button explore-button">Explore Surroundings</button>
            <button id="searchSurvivorButton" class="button survivor-button">Search for Survivors</button>
            <button id="sleepButton" class="button sleep-button">Sleep</button>
            <button id="searchFoodButton" class="button food-button">Search for Food</button>
            <button id="searchWaterButton" class="button water-button">Search for Water</button>
        </div>
        <div class="game-stats">
            <div class="stat-item">
                <span class="stat-label">Current Location:</span>
                <span id="currentLocation">-</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Locations Visited:</span>
                <span id="locationsVisited">0</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Days Survived:</span>
                <span id="daysSurvived">0</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Current Time:</span>
                <span id="currentTime">-</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Health:</span>
                <span id="healthValue" class="stat-value">100/100</span>
                <div class="stat-bar">
                    <div id="healthBar" class="stat-bar-fill health-bar" style="width: 100%"></div>
                </div>
            </div>
            <div class="stat-item">
                <span class="stat-label">Hunger:</span>
                <span id="hungerValue" class="stat-value">100/100</span>
                <div class="stat-bar">
                    <div id="hungerBar" class="stat-bar-fill hunger-bar" style="width: 100%"></div>
                </div>
            </div>
            <div class="stat-item">
                <span class="stat-label">Thirst:</span>
                <span id="thirstValue" class="stat-value">100/100</span>
                <div class="stat-bar">
                    <div id="thirstBar" class="stat-bar-fill thirst-bar" style="width: 100%"></div>
                </div>
            </div>
            <div class="stat-item">
                <span class="stat-label">Stamina:</span>
                <span id="staminaValue" class="stat-value">100/100</span>
                <div class="stat-bar">
                    <div id="staminaBar" class="stat-bar-fill stamina-bar" style="width: 100%"></div>
                </div>
            </div>
        </div>

        <div id="playerCharacter" class="player-character" style="display: none;">
            <div class="player-character-image" onclick="showPlayerDetails()">
                <img id="playerCharacterImage" src="" alt="Player Character">
            </div>
            <div class="player-character-name" id="playerCharacterName"></div>
            <div class="player-character-attributes">
                <div class="player-character-attribute">
                    <div class="player-character-attribute-label">STR</div>
                    <div class="player-character-attribute-value" id="playerCharacterSTR"></div>
                </div>
                <div class="player-character-attribute">
                    <div class="player-character-attribute-label">DEX</div>
                    <div class="player-character-attribute-value" id="playerCharacterDEX"></div>
                </div>
                <div class="player-character-attribute">
                    <div class="player-character-attribute-label">CON</div>
                    <div class="player-character-attribute-value" id="playerCharacterCON"></div>
                </div>
                <div class="player-character-attribute">
                    <div class="player-character-attribute-label">INT</div>
                    <div class="player-character-attribute-value" id="playerCharacterINT"></div>
                </div>
                <div class="player-character-attribute">
                    <div class="player-character-attribute-label">WIS</div>
                    <div class="player-character-attribute-value" id="playerCharacterWIS"></div>
                </div>
                <div class="player-character-attribute">
                    <div class="player-character-attribute-label">CHA</div>
                    <div class="player-character-attribute-value" id="playerCharacterCHA"></div>
                </div>
            </div>
            <div class="player-character-description" id="playerCharacterDescription"></div>
        </div>

        <button id="resetButton" class="reset-game-button" title="Reset Game - This will delete all progress">Reset Game</button>
    </div>

    <div class="main-content">
        <button id="menuToggle" class="menu-toggle">☰</button>
        <button id="descriptionToggle" class="description-toggle" title="Toggle Description">📝</button>
        <button id="regenButton" class="regen-area-button" title="Regenerate Background">⟳</button>
        <div id="startScreen" class="start-screen">
            <h2>Welcome to the Post-Apocalyptic World</h2>
            <p>In this game, you'll navigate through a world ravaged by disaster. Your choices will determine your survival. 
               Each location you visit will be uniquely generated, and you'll need to make strategic decisions to stay alive.</p>
            
            <div class="character-form">
                <h3>Create Your Character</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label for="playerName">Name</label>
                        <input type="text" id="playerName" required>
                    </div>
                    <div class="form-group">
                        <label for="playerGender">Gender</label>
                        <select id="playerGender" required>
                            <option value="Male">Male</option>
                            <option value="Female">Female</option>
                        </select>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="playerAge">Age</label>
                        <select id="playerAge" required>
                            <option value="young">Young</option>
                            <option value="middle-aged">Middle-aged</option>
                            <option value="elderly">Elderly</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="playerBodyType">Body Type</label>
                        <select id="playerBodyType" required>
                            <option value="slim">Slim</option>
                            <option value="athletic">Athletic</option>
                            <option value="curvy">Curvy</option>
                            <option value="muscular">Muscular</option>
                            <option value="average">Average</option>
                        </select>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="playerEyeColor">Eye Color</label>
                        <input type="text" id="playerEyeColor" required>
                    </div>
                    <div class="form-group">
                        <label for="playerHairColor">Hair Color</label>
                        <input type="text" id="playerHairColor" required>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="playerEthnicity">Ethnicity</label>
                        <input type="text" id="playerEthnicity" required>
                    </div>
                    <div class="form-group">
                        <label for="playerClothing">Clothing</label>
                        <input type="text" id="playerClothing" value="Rags" readonly>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="playerWeapon">Weapon</label>
                        <input type="text" id="playerWeapon" value="None" readonly>
                    </div>
                    <div class="form-group">
                        <label for="playerPersonality">Personality</label>
                        <input type="text" id="playerPersonality" required>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="playerHeight">Height</label>
                        <input type="text" id="playerHeight" required>
                    </div>
                    <div class="form-group">
                        <label for="playerWeight">Weight</label>
                        <input type="text" id="playerWeight" required>
                    </div>
                </div>
                <div class="form-group">
                    <label for="playerBackground">Background</label>
                    <textarea id="playerBackground" rows="3" required></textarea>
                </div>
                <div class="form-group">
                    <label for="playerAdditionalDetails">Additional Details</label>
                    <textarea id="playerAdditionalDetails" rows="3"></textarea>
                </div>
                <div class="form-group">
                    <label>Attributes (Total Points: <span id="totalAttributePoints">0</span>/15)</label>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="playerSTR">Strength (STR)</label>
                            <input type="range" id="playerSTR" min="0" max="15" value="0" class="attribute-slider">
                            <span class="attribute-value" id="playerSTRValue">0</span>
                        </div>
                        <div class="form-group">
                            <label for="playerDEX">Dexterity (DEX)</label>
                            <input type="range" id="playerDEX" min="0" max="15" value="0" class="attribute-slider">
                            <span class="attribute-value" id="playerDEXValue">0</span>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="playerCON">Constitution (CON)</label>
                            <input type="range" id="playerCON" min="0" max="15" value="0" class="attribute-slider">
                            <span class="attribute-value" id="playerCONValue">0</span>
                        </div>
                        <div class="form-group">
                            <label for="playerINT">Intelligence (INT)</label>
                            <input type="range" id="playerINT" min="0" max="15" value="0" class="attribute-slider">
                            <span class="attribute-value" id="playerINTValue">0</span>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="playerWIS">Wisdom (WIS)</label>
                            <input type="range" id="playerWIS" min="0" max="15" value="0" class="attribute-slider">
                            <span class="attribute-value" id="playerWISValue">0</span>
                        </div>
                        <div class="form-group">
                            <label for="playerCHA">Charisma (CHA)</label>
                            <input type="range" id="playerCHA" min="0" max="15" value="0" class="attribute-slider">
                            <span class="attribute-value" id="playerCHAValue">0</span>
                        </div>
                    </div>
                </div>
                <div class="character-preview">
                    <img id="playerPreviewImage" src="" alt="Character Preview">
                    <h4 id="playerPreviewName">Your Character</h4>
                    <p id="playerPreviewDescription">Character description will appear here</p>
                </div>
                <button id="generateCharacterButton" class="button generate-button">Generate Random Character</button>
                <button id="startButton" class="button start-button">Start Game</button>
            </div>
        </div>

        <div id="gameState" class="game-state">
            <div class="location-container">
                <img id="locationImage" src="" alt="Current Location">
                <div id="npcContainer" class="npc-container"></div>
            </div>
            <div class="location-info">
                <h2 id="locationTitle">Current Location</h2>
                <p id="locationText">Loading location description...</p>
            </div>
        </div>

        <div id="npcModal" class="npc-modal">
            <div class="npc-modal-content">
                <button class="npc-modal-close">&times;</button>
                <div class="npc-modal-left">
                    <div class="npc-modal-image">
                        <img src="" alt="NPC">
                    </div>
                </div>
                <div class="npc-modal-right">
                    <div class="npc-modal-header">
                        <h3 class="npc-modal-name"></h3>
                        <button class="npc-modal-regen" title="Regenerate Image">⟳</button>
                        <p class="npc-modal-description"></p>
                    </div>
                    <div class="npc-modal-attributes"></div>
                    <div class="npc-modal-background"></div>
                    <div class="npc-modal-additional"></div>
                </div>
            </div>
        </div>

        <div id="gameOverScreen" class="game-over" style="display: none;">
            <h2>GAME OVER</h2>
            <p>Your health has reached zero. You didn't survive the post-apocalyptic world.</p>
            <button id="restartButton" class="button start-button">Start New Game</button>
        </div>

        <div id="loadingOverlay" class="loading-overlay" style="display: none;">
            <div class="loading-spinner"></div>
            <div id="loadingMessage" class="loading-message">Generating...</div>
            <div id="loadingDescription" class="loading-description"></div>
        </div>
    </div>

    <div id="playerModal" class="npc-modal">
        <div class="npc-modal-content">
            <button class="npc-modal-close">&times;</button>
            <div class="npc-modal-left">
                <div class="npc-modal-image">
                    <img src="" alt="Player Character">
                </div>
            </div>
            <div class="npc-modal-right">
                <div class="npc-modal-header">
                    <h3 class="npc-modal-name"></h3>
                    <button class="npc-modal-regen" title="Regenerate Image">⟳</button>
                    <p class="npc-modal-description"></p>
                </div>
                <div class="npc-modal-attributes"></div>
                <div class="npc-modal-background"></div>
                <div class="npc-modal-additional"></div>
            </div>
        </div>
    </div>

    <script>
        // Add config to window object
        window.config = {
            defaultOllamaModel: '<%= defaultOllamaModel %>'
        };

        // Initialize game data
        let gameData = {
            currentLocation: null,
            visitedLocations: new Map(),
            discoveredAreas: new Map(),
            areaConnections: new Map(),
            linkPositions: new Map(),
            areaNPCs: new Map(),
            maxLinkedAreas: new Map(),
            nextAreaId: 1,
            nextNPCId: 1,
            daysSurvived: 0,
            currentTime: { hours: 8, minutes: 0 },
            worldDescription: 'A world ravaged by disaster, where survival is a daily struggle. The environment is harsh, resources are scarce, and danger lurks around every corner.',
            stats: {
                health: 100,
                hunger: 100,
                thirst: 100,
                stamina: 100
            },
            playerCharacter: null,
            difficulty: 1
        };

        // Define utility functions in the global scope
        window.loadGameState = function() {
            try {
                const savedState = localStorage.getItem('survivalGameState');
                if (savedState) {
                    const parsed = JSON.parse(savedState);
                    // Initialize Maps from saved data
                    const visitedLocations = new Map(Object.entries(parsed.visitedLocations || {}));
                    const discoveredAreas = new Map(Object.entries(parsed.discoveredAreas || {}));
                    const areaConnections = new Map(Object.entries(parsed.areaConnections || {}));
                    const linkPositions = new Map(Object.entries(parsed.linkPositions || {}));
                    const areaNPCs = new Map(Object.entries(parsed.areaNPCs || {}));
                    const maxLinkedAreas = new Map(Object.entries(parsed.maxLinkedAreas || {}));
                    
                    // Create the game state object
                    const loadedGameState = {
                        currentLocation: parsed.currentLocation || null,
                        visitedLocations,
                        discoveredAreas,
                        areaConnections,
                        linkPositions,
                        areaNPCs,
                        maxLinkedAreas,
                        nextAreaId: parsed.nextAreaId || 1,
                        nextNPCId: parsed.nextNPCId || 1,
                        daysSurvived: parsed.daysSurvived || 0,
                        currentTime: parsed.currentTime || { hours: 8, minutes: 0 },
                        worldDescription: parsed.worldDescription || 'A world ravaged by disaster, where survival is a daily struggle. The environment is harsh, resources are scarce, and danger lurks around every corner.',
                        stats: parsed.stats || {
                            health: 100,
                            hunger: 100,
                            thirst: 100,
                            stamina: 100
                        },
                        playerCharacter: parsed.playerCharacter || null,
                        difficulty: parsed.difficulty || 1
                    };

                    return loadedGameState;
                }
            } catch (error) {
                console.error('Error loading game state:', error);
            }
            
            return gameData;
        };

        window.saveGameState = function(gameData) {
            try {
                // Convert Maps to Objects for storage
                const visitedLocationsObj = gameData.visitedLocations.size > 0 
                    ? Object.fromEntries(gameData.visitedLocations) 
                    : {};
                const discoveredAreasObj = gameData.discoveredAreas.size > 0 
                    ? Object.fromEntries(gameData.discoveredAreas) 
                    : {};
                const areaConnectionsObj = gameData.areaConnections.size > 0
                    ? Object.fromEntries(gameData.areaConnections)
                    : {};
                const linkPositionsObj = gameData.linkPositions.size > 0
                    ? Object.fromEntries(gameData.linkPositions)
                    : {};
                const maxLinkedAreasObj = gameData.maxLinkedAreas.size > 0
                    ? Object.fromEntries(gameData.maxLinkedAreas)
                    : {};
                const areaNPCsObj = gameData.areaNPCs.size > 0
                    ? Object.fromEntries(gameData.areaNPCs)
                    : {};

                // Create the state object
                const stateToSave = {
                    currentLocation: gameData.currentLocation,
                    visitedLocations: visitedLocationsObj,
                    discoveredAreas: discoveredAreasObj,
                    areaConnections: areaConnectionsObj,
                    linkPositions: linkPositionsObj,
                    areaNPCs: areaNPCsObj,
                    maxLinkedAreas: maxLinkedAreasObj,
                    nextAreaId: gameData.nextAreaId,
                    nextNPCId: gameData.nextNPCId,
                    daysSurvived: gameData.daysSurvived,
                    currentTime: gameData.currentTime,
                    worldDescription: gameData.worldDescription,
                    stats: gameData.stats,
                    playerCharacter: gameData.playerCharacter,
                    difficulty: gameData.difficulty
                };

                // Save to localStorage
                localStorage.setItem('survivalGameState', JSON.stringify(stateToSave));
            } catch (error) {
                console.error('Error saving game state:', error);
            }
        };

        window.showLoading = function(message, description) {
            const loadingMessage = document.getElementById('loadingMessage');
            const loadingDescription = document.getElementById('loadingDescription');
            const loadingOverlay = document.getElementById('loadingOverlay');
            
            loadingMessage.textContent = message;
            loadingDescription.textContent = description;
            loadingOverlay.style.display = 'flex';
        };

        window.hideLoading = function() {
            const loadingOverlay = document.getElementById('loadingOverlay');
            loadingOverlay.style.display = 'none';
        };

        window.showNothingFound = function(message) {
            const gameState = document.getElementById('gameState');
            const messageDiv = document.createElement('div');
            messageDiv.className = 'nothing-found';
            messageDiv.textContent = message;
            gameState.appendChild(messageDiv);
            setTimeout(() => {
                messageDiv.remove();
            }, 3000);
        };

        window.displayNPCs = function() {
            const npcContainer = document.getElementById('npcContainer');
            npcContainer.innerHTML = '';

            const gameData = window.loadGameState();
            if (!gameData.currentLocation || !gameData.areaNPCs) {
                return;
            }

            const currentNPCs = gameData.areaNPCs.get(gameData.currentLocation.title) || [];
            currentNPCs.forEach(npc => {
                const npcWrapper = document.createElement('div');
                npcWrapper.className = 'npc-wrapper';
                
                const npcElement = document.createElement('div');
                npcElement.className = 'npc';
                npcElement.innerHTML = `<img src="${npc.imageUrl}" alt="${npc.data.name}">`;
                npcElement.onclick = (e) => {
                    if (!e.target.closest('.npc-action-button')) {
                        window.showNPCDetails(npc);
                    }
                };
                
                const actionsDiv = document.createElement('div');
                actionsDiv.className = 'npc-actions';
                actionsDiv.innerHTML = `
                    <!--<button class="npc-action-button regen" title="Regenerate Image" onclick="regenerateNPCImage(event, ${npc.id})">⟳</button>-->
                    <button class="npc-action-button talk" title="Talk" onclick="talkToNPC(event, ${npc.id})">💬</button>
                    <button class="npc-action-button trade" title="Trade" onclick="tradeWithNPC(event, ${npc.id})">🔄</button>
                    <button class="npc-action-button fight" title="Fight" onclick="fightNPC(event, ${npc.id})">⚔️</button>
                `;
                
                npcWrapper.appendChild(npcElement);
                npcWrapper.appendChild(actionsDiv);
                npcContainer.appendChild(npcWrapper);
            });
        };

        window.showNPCDetails = function(npc) {
            const modal = document.getElementById('npcModal');
            const modalImage = modal.querySelector('.npc-modal-image img');
            const modalName = modal.querySelector('.npc-modal-name');
            const modalDescription = modal.querySelector('.npc-modal-description');
            const modalAttributes = modal.querySelector('.npc-modal-attributes');
            const modalBackground = modal.querySelector('.npc-modal-background');
            const modalAdditional = modal.querySelector('.npc-modal-additional');
            const modalRegen = modal.querySelector('.npc-modal-regen');

            modalImage.src = npc.imageUrl;
            modalImage.alt = npc.data.name;
            modalName.textContent = npc.data.name;
            modalDescription.textContent = npc.data.description;
            modalRegen.onclick = (e) => {
                e.stopPropagation();
                regenerateNPCImage(e, npc.id);
            };

            // Clear previous attributes
            modalAttributes.innerHTML = '';

            // Add D&D-style attributes
            const dndAttributes = [
                { key: 'STR', label: 'Strength', value: npc.data.attributes.STR || 10 },
                { key: 'DEX', label: 'Dexterity', value: npc.data.attributes.DEX || 10 },
                { key: 'CON', label: 'Constitution', value: npc.data.attributes.CON || 10 },
                { key: 'INT', label: 'Intelligence', value: npc.data.attributes.INT || 10 },
                { key: 'WIS', label: 'Wisdom', value: npc.data.attributes.WIS || 10 },
                { key: 'CHA', label: 'Charisma', value: npc.data.attributes.CHA || 10 },
                { key: 'clothing', label: 'Clothing', value: npc.data.attributes.clothing },
                { key: 'weapon', label: 'Weapon', value: npc.data.attributes.weapon }
            ];

            // Add character attributes
            const characterAttributes = [
                { key: 'gender', label: 'Gender', value: npc.data.attributes.gender },
                { key: 'age', label: 'Age', value: npc.data.attributes.age },
                { key: 'bodyType', label: 'Body Type', value: npc.data.attributes.bodyType },
                { key: 'eyeColor', label: 'Eye Color', value: npc.data.attributes.eyeColor },
                { key: 'hairColor', label: 'Hair Color', value: npc.data.attributes.hairColor },
                { key: 'ethnicity', label: 'Ethnicity', value: npc.data.attributes.ethnicity },
                { key: 'personality', label: 'Personality', value: npc.data.attributes.personality },
                { key: 'height', label: 'Height', value: npc.data.attributes.height },
                { key: 'weight', label: 'Weight', value: npc.data.attributes.weight }
            ];

            // Create D&D attributes section
            const dndSection = document.createElement('div');
            dndSection.className = 'npc-modal-section';
            dndSection.innerHTML = '<h4 class="npc-modal-section-title">Attributes</h4>';
            
            dndAttributes.forEach(attr => {
                const attributeDiv = document.createElement('div');
                attributeDiv.className = 'npc-modal-attribute';
                const percentage = (attr.value / 20) * 100;
                attributeDiv.innerHTML = `
                    <div class="npc-modal-attribute-label">${attr.label} (${attr.key})</div>
                    <div class="npc-modal-attribute-value">${attr.value}</div>
                `;
                dndSection.appendChild(attributeDiv);
            });

            // Create character attributes section
            const charSection = document.createElement('div');
            charSection.className = 'npc-modal-section';
            charSection.innerHTML = '<h4 class="npc-modal-section-title">Physical Characteristics</h4>';
            
            characterAttributes.forEach(attr => {
                if (attr.value) {
                    const attributeDiv = document.createElement('div');
                    attributeDiv.className = 'npc-modal-attribute';
                    attributeDiv.innerHTML = `
                        <div class="npc-modal-attribute-label">${attr.label}</div>
                        <div class="npc-modal-attribute-value">${attr.value}</div>
                    `;
                    charSection.appendChild(attributeDiv);
                }
            });

            // Add sections to modal
            modalAttributes.appendChild(dndSection);
            modalAttributes.appendChild(charSection);

            modalBackground.textContent = npc.data.background;
            modalAdditional.textContent = npc.data.additionalDetails;

            modal.style.display = 'flex';
        };

        window.regenerateNPCImage = async function(event, npcId) {
            event.stopPropagation();
            try {
                const gameData = window.loadGameState();
                window.showLoading('Regenerating NPC Image', 'Creating a new visual representation of the survivor...');
                
                // Find the NPC in the current area
                const currentNPCs = gameData.areaNPCs.get(gameData.currentLocation.title) || [];
                const npcIndex = currentNPCs.findIndex(n => n.id === npcId);
                
                if (npcIndex === -1) {
                    throw new Error('NPC not found');
                }

                const npc = currentNPCs[npcIndex];

                // First, generate a detailed prompt using Ollama's Stable Diffusion role
                const promptResponse = await fetch('/api/ollama', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        prompt: JSON.stringify({
                            name: npc.data.name,
                            description: npc.data.description,
                            attributes: npc.data.attributes,
                            background: npc.data.background,
                            additionalDetails: npc.data.additionalDetails
                        }),
                        model: window.config.defaultOllamaModel,
                        role: 'sd-prompt',
                        stream: false
                    })
                });

                if (!promptResponse.ok) {
                    throw new Error('Failed to generate image prompt');
                }

                const promptData = await promptResponse.json();
                const imagePrompt = promptData.response.choices[0].message.content;

                // Generate new image using the detailed prompt
                const npcImageResponse = await fetch('/api/generate-image', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        prompt: imagePrompt,
                        areaId: `npc_${npcId}`,
                        width: 576,
                        height: 1024
                    })
                });

                if (!npcImageResponse.ok) {
                    throw new Error('Failed to generate NPC image');
                }

                const imageData = await npcImageResponse.json();
                if (!imageData.success) {
                    throw new Error(imageData.error || 'Failed to generate image');
                }

                // Update NPC image URL with timestamp to prevent caching
                const timestamp = new Date().getTime();
                const newImageUrl = (imageData.imageUrl.startsWith('/') ? imageData.imageUrl : `/${imageData.imageUrl}`) + `?t=${timestamp}`;
                
                // Update the NPC in the current area's NPCs array
                currentNPCs[npcIndex] = {
                    ...npc,
                    imageUrl: newImageUrl
                };
                
                // Update the areaNPCs map
                gameData.areaNPCs.set(gameData.currentLocation.title, currentNPCs);
                
                // Save the updated game state
                window.saveGameState(gameData);
                
                // Re-render the NPC container to ensure all images are properly updated
                const npcContainer = document.getElementById('npcContainer');
                const currentNPCsList = gameData.areaNPCs.get(gameData.currentLocation.title) || [];
                
                npcContainer.innerHTML = '';
                currentNPCsList.forEach(npc => {
                    const npcWrapper = document.createElement('div');
                    npcWrapper.className = 'npc-wrapper';
                    
                    const npcElement = document.createElement('div');
                    npcElement.className = 'npc';
                    npcElement.innerHTML = `<img src="${npc.imageUrl}" alt="${npc.data.name}">`;
                    npcElement.onclick = (e) => {
                        if (!e.target.closest('.npc-action-button')) {
                            window.showNPCDetails(npc);
                        }
                    };
                    
                    const actionsDiv = document.createElement('div');
                    actionsDiv.className = 'npc-actions';
                    actionsDiv.innerHTML = `
                        <button class="npc-action-button regen" title="Regenerate Image" onclick="regenerateNPCImage(event, ${npc.id})">⟳</button>
                        <button class="npc-action-button talk" title="Talk" onclick="talkToNPC(event, ${npc.id})">💬</button>
                        <button class="npc-action-button trade" title="Trade" onclick="tradeWithNPC(event, ${npc.id})">🔄</button>
                        <button class="npc-action-button fight" title="Fight" onclick="fightNPC(event, ${npc.id})">⚔️</button>
                    `;
                    
                    npcWrapper.appendChild(npcElement);
                    npcWrapper.appendChild(actionsDiv);
                    npcContainer.appendChild(npcWrapper);
                });
                
                window.hideLoading();
                window.showNothingFound(`Regenerated image for ${npc.data.name}`);

            } catch (error) {
                console.error('Error regenerating NPC image:', error);
                window.hideLoading();
                window.showNothingFound(`Error: ${error.message}`);
            }
        };

        window.talkToNPC = function(event, npcId) {
            event.stopPropagation();
            window.showNothingFound('Talking to NPCs is not implemented yet');
        };

        window.tradeWithNPC = function(event, npcId) {
            event.stopPropagation();
            window.showNothingFound('Trading with NPCs is not implemented yet');
        };

        window.fightNPC = function(event, npcId) {
            event.stopPropagation();
            window.showNothingFound('Fighting NPCs is not implemented yet');
        };

        document.addEventListener('DOMContentLoaded', () => {
            const startScreen = document.getElementById('startScreen');
            const gameState = document.getElementById('gameState');
            const startButton = document.getElementById('startButton');
            const resetButton = document.getElementById('resetButton');
            const exploreButton = document.getElementById('exploreButton');
            const regenButton = document.getElementById('regenButton');
            const sleepButton = document.getElementById('sleepButton');
            const searchFoodButton = document.getElementById('searchFoodButton');
            const searchWaterButton = document.getElementById('searchWaterButton');
            const searchSurvivorButton = document.getElementById('searchSurvivorButton');
            const locationImage = document.getElementById('locationImage');
            const locationTitle = document.getElementById('locationTitle');
            const locationText = document.getElementById('locationText');
            const currentLocationSpan = document.getElementById('currentLocation');
            const locationsVisitedSpan = document.getElementById('locationsVisited');
            const daysSurvivedSpan = document.getElementById('daysSurvived');
            const currentTimeSpan = document.getElementById('currentTime');
            const healthValue = document.getElementById('healthValue');
            const hungerValue = document.getElementById('hungerValue');
            const thirstValue = document.getElementById('thirstValue');
            const staminaValue = document.getElementById('staminaValue');
            const healthBar = document.getElementById('healthBar');
            const hungerBar = document.getElementById('hungerBar');
            const thirstBar = document.getElementById('thirstBar');
            const staminaBar = document.getElementById('staminaBar');
            const gameOverScreen = document.getElementById('gameOverScreen');
            const restartButton = document.getElementById('restartButton');
            const loadingOverlay = document.getElementById('loadingOverlay');
            const loadingMessage = document.getElementById('loadingMessage');
            const loadingDescription = document.getElementById('loadingDescription');
            const menuToggle = document.getElementById('menuToggle');
            const sidebar = document.querySelector('.sidebar');
            const mainContent = document.querySelector('.main-content');

            // Load game state from localStorage
            gameData = window.loadGameState();

            // If there's saved game state, show the game screen
            if (gameData.currentLocation) {
                startScreen.style.display = 'none';
                gameState.style.display = 'block';
                displayCurrentLocation();
            }

            // Update player character display if it exists
            if (gameData.playerCharacter) {
                updatePlayerCharacterDisplay();
            }

            function formatTime(hours, minutes) {
                const ampm = hours >= 12 ? 'PM' : 'AM';
                const displayHours = hours % 12 || 12;
                return `${displayHours}:${minutes.toString().padStart(2, '0')} ${ampm}`;
            }

            function updateStatsDisplay() {
                // Update health
                healthValue.textContent = `${Math.max(0, gameData.stats.health)}/100`;
                healthBar.style.width = `${Math.max(0, gameData.stats.health)}%`;
                
                // Update hunger
                hungerValue.textContent = `${gameData.stats.hunger}/100`;
                hungerBar.style.width = `${Math.max(0, gameData.stats.hunger)}%`;
                
                // Update thirst
                thirstValue.textContent = `${gameData.stats.thirst}/100`;
                thirstBar.style.width = `${Math.max(0, gameData.stats.thirst)}%`;
                
                // Update stamina
                staminaValue.textContent = `${gameData.stats.stamina}/100`;
                staminaBar.style.width = `${gameData.stats.stamina}%`;

                // Update button states based on stamina
                updateButtonStates();
            }

            function updateButtonStates() {
                // Update explore button
                const currentMaxLinked = gameData.maxLinkedAreas.get(gameData.currentLocation.title);
                const currentConnections = gameData.areaConnections.get(gameData.currentLocation.title) || [];
                const canExplore = currentConnections.length < currentMaxLinked && gameData.stats.stamina >= 20;
                
                exploreButton.disabled = !canExplore;
                if (exploreButton.disabled) {
                    if (currentConnections.length >= currentMaxLinked) {
                        exploreButton.title = 'All possible areas from this location have been discovered';
                    } else {
                        exploreButton.title = `Not enough stamina (${gameData.stats.stamina}/20 required)`;
                    }
                } else {
                    exploreButton.title = `Explore surroundings (${currentConnections.length}/${currentMaxLinked} areas discovered)`;
                }

                // Update search survivor button
                const currentNPCs = gameData.areaNPCs.get(gameData.currentLocation.title) || [];
                const canSearchSurvivors = currentNPCs.length < 2 && gameData.stats.stamina >= 20;
                
                searchSurvivorButton.disabled = !canSearchSurvivors;
                if (searchSurvivorButton.disabled) {
                    if (currentNPCs.length >= 2) {
                        searchSurvivorButton.title = 'This area already has the maximum number of survivors';
                    } else {
                        searchSurvivorButton.title = `Not enough stamina (${gameData.stats.stamina}/20 required)`;
                    }
                } else {
                    searchSurvivorButton.title = `Search for survivors (${currentNPCs.length}/2 survivors found)`;
                }

                // Update sleep button
                sleepButton.disabled = gameData.stats.stamina >= 100;
                sleepButton.title = sleepButton.disabled ? 'Stamina is already full' : 'Rest for 1 hour to restore stamina';

                // Update search food button
                searchFoodButton.disabled = gameData.stats.stamina < 10;
                searchFoodButton.title = searchFoodButton.disabled ? 
                    `Not enough stamina (${gameData.stats.stamina}/10 required)` : 
                    'Search for food (10 stamina)';

                // Update search water button
                searchWaterButton.disabled = gameData.stats.stamina < 10;
                searchWaterButton.title = searchWaterButton.disabled ? 
                    `Not enough stamina (${gameData.stats.stamina}/10 required)` : 
                    'Search for water (10 stamina)';
            }

            function updateStats(hours) {
                // Update hunger and thirst with reduced decay rates
                gameData.stats.hunger -= hours * 2;  // Reduced from 5 to 2 per hour
                gameData.stats.thirst -= hours * 5;  // Reduced from 10 to 5 per hour

                // Calculate health damage from negative hunger and thirst
                let healthDamage = 0;
                if (gameData.stats.hunger < 0) {
                    healthDamage += Math.abs(gameData.stats.hunger) * 0.5;  // Reduced health damage from hunger
                }
                if (gameData.stats.thirst < 0) {
                    healthDamage += Math.abs(gameData.stats.thirst) * 0.5;  // Reduced health damage from thirst
                }

                // Apply health damage
                if (healthDamage > 0) {
                    gameData.stats.health -= healthDamage;
                }

                // Check for game over
                if (gameData.stats.health <= 0) {
                    gameOver();
                    return;
                }

                // Update display
                updateStatsDisplay();
                window.saveGameState(gameData);
            }

            function gameOver() {
                // Clear game state
                localStorage.removeItem('survivalGameState');
                
                // Show game over screen
                gameOverScreen.style.display = 'flex';
                gameState.style.display = 'none';
                startScreen.style.display = 'none';
            }

            function advanceTime(hours) {
                gameData.currentTime.minutes += hours * 60;
                
                // Handle hour overflow
                while (gameData.currentTime.minutes >= 60) {
                    gameData.currentTime.hours += 1;
                    gameData.currentTime.minutes -= 60;
                }
                
                // Handle day transition
                while (gameData.currentTime.hours >= 24) {
                    gameData.currentTime.hours -= 24;
                    gameData.daysSurvived += 1;
                }
                
                // Update stats
                updateStats(hours);
                
                // Update display
                updateGameStats();
            }

            function displayCurrentLocation() {
                if (gameData.currentLocation) {
                    const locationData = gameData.visitedLocations.get(gameData.currentLocation.title);
                    locationTitle.textContent = `${gameData.currentLocation.title} (Difficulty ${locationData.difficulty})`;
                    locationText.textContent = gameData.currentLocation.description;
                    if (gameData.currentLocation.imageUrl) {
                        locationImage.src = gameData.currentLocation.imageUrl;
                    }
                    window.displayNPCs();
                    updateGameStats();
                    displayDiscoveredAreas();
                    updateExploreButtonState();
                }
            }

            function displayDiscoveredAreas() {
                // Remove any existing area links
                document.querySelectorAll('.area-link').forEach(link => link.remove());

                if (!gameData.currentLocation) return;

                // Get connected areas for current location, excluding current location
                const connectedAreas = (gameData.areaConnections.get(gameData.currentLocation.title) || [])
                    .filter(area => area.title !== gameData.currentLocation.title);
                
                // Get available corners (excluding those already used)
                const usedCorners = new Set();
                connectedAreas.forEach(area => {
                    const position = gameData.linkPositions.get(`${gameData.currentLocation.title}-${area.title}`);
                    if (position) usedCorners.add(position);
                });

                const availableCorners = ['top-left', 'top-right', 'bottom-left', 'bottom-right']
                    .filter(corner => !usedCorners.has(corner));

                // Create links for connected areas
                connectedAreas.forEach(area => {
                    // Get or assign a corner position
                    let position = gameData.linkPositions.get(`${gameData.currentLocation.title}-${area.title}`);
                    if (!position && availableCorners.length > 0) {
                        position = availableCorners.shift();
                        gameData.linkPositions.set(`${gameData.currentLocation.title}-${area.title}`, position);
                        gameData.linkPositions.set(`${area.title}-${gameData.currentLocation.title}`, position);
                        window.saveGameState(gameData);
                    }

                    if (position) {
                        const link = document.createElement('a');
                        link.className = `area-link ${position}`;
                        link.href = '#';
                        const locationData = gameData.visitedLocations.get(area.title);
                        link.innerHTML = `
                            <span>→ ${area.title} (Difficulty ${locationData.difficulty})</span>
                            <div class="area-thumb">
                                <img src="${area.imageUrl}" alt="${area.title}">
                            </div>
                        `;
                        link.onclick = (e) => {
                            e.preventDefault();
                            navigateToArea(area);
                        };
                        gameState.appendChild(link);
                    }
                });
            }

            function navigateToArea(area) {
                // Check stamina
                if (gameData.stats.stamina < 10) {
                    window.showNothingFound('Not enough stamina to move (10 stamina required)');
                    return;
                }

                // Use the stored area data
                gameData.currentLocation = {
                    title: area.title,
                    description: area.description,
                    imageUrl: area.imageUrl,
                    areaId: area.areaId
                };
                
                // Consume stamina
                gameData.stats.stamina -= 10;
                
                advanceTime(1); // Moving takes 1 hour
                displayCurrentLocation();
                window.saveGameState(gameData);
            }

            exploreButton.addEventListener('click', async () => {
                // Check stamina
                if (gameData.stats.stamina < 20) {
                    window.showNothingFound('Not enough stamina to explore (20 stamina required)');
                    return;
                }

                // 60% chance to find something
                if (Math.random() < 0.6) {
                    await generateNewLocation();
                } else {
                    window.showNothingFound('You explore the area but find nothing of interest...');
                }
                
                // Consume stamina
                gameData.stats.stamina -= 20;
                
                advanceTime(2); // Exploring takes 2 hours
                updateStatsDisplay();
            });

            searchSurvivorButton.addEventListener('click', async () => {
                // Check stamina
                if (gameData.stats.stamina < 20) {
                    window.showNothingFound('Not enough stamina to search for survivors (20 stamina required)');
                    return;
                }

                // Check if we've reached the maximum number of survivors in this area
                const currentNPCs = gameData.areaNPCs.get(gameData.currentLocation.title) || [];
                if (currentNPCs.length >= 2) {
                    window.showNothingFound('This area already has the maximum number of survivors.');
                    return;
                }

                // 60% chance to find a survivor
                if (Math.random() < 0.6) {
                    await discoverNPC();
                } else {
                    window.showNothingFound('You search the area but find no survivors...');
                }
                
                // Consume stamina
                gameData.stats.stamina -= 20;
                
                advanceTime(2); // Searching takes 2 hours
                updateStatsDisplay();
            });

            async function discoverNPC() {
                try {
                    window.showLoading('Exploring Surroundings', 'Searching for survivors in the area...');

                    // Call Ollama API to generate NPC character
                    const response = await fetch('/api/ollama', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            prompt: `Generate character in this world: ${gameData.worldDescription}. Current location: ${gameData.currentLocation.title}. Location description: ${gameData.currentLocation.description}. Location difficulty level: ${gameData.visitedLocations.get(gameData.currentLocation.title).difficulty}. Include D&D-style attributes (STR, DEX, CON, INT, WIS, CHA) with values between 3 and ${Math.min(18, 3 + Math.floor(gameData.visitedLocations.get(gameData.currentLocation.title).difficulty / 2))}.`,
                            model: window.config.defaultOllamaModel,
                            role: 'character_builder',
                            stream: false
                        })
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        console.error('Ollama API error:', errorData);
                        throw new Error(`Failed to generate NPC: ${errorData.details || response.statusText}`);
                    }

                    const responseData = await response.json();
                    console.log('Ollama response:', responseData);
                    
                    // Extract the NPC data from the response
                    let npcData;
                    try {
                        npcData = JSON.parse(responseData.response.choices[0].message.content);
                    } catch (e) {
                        console.error('Failed to parse NPC data:', e);
                        throw new Error('Invalid NPC data format received');
                    }

                    if (!npcData.name || !npcData.description || !npcData.attributes) {
                        throw new Error('Missing required NPC data fields');
                    }

                    // Ensure all D&D attributes are present and within valid range
                    const requiredAttributes = ['STR', 'DEX', 'CON', 'INT', 'WIS', 'CHA'];
                    for (const attr of requiredAttributes) {
                        if (!npcData.attributes[attr]) {
                            npcData.attributes[attr] = Math.floor(Math.random() * 16) + 3; // Random value between 3 and 18
                        } else {
                            // Ensure the value is within the valid range
                            npcData.attributes[attr] = Math.max(3, Math.min(18, parseInt(npcData.attributes[attr])));
                        }
                    }

                    // Generate a detailed prompt using Ollama's Stable Diffusion role
                    const promptResponse = await fetch('/api/ollama', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            prompt: JSON.stringify({
                                name: npcData.name,
                                description: npcData.description,
                                attributes: npcData.attributes,
                                background: npcData.background,
                                additionalDetails: npcData.additionalDetails
                            }),
                            model: window.config.defaultOllamaModel,
                            role: 'sd-prompt',
                            stream: false
                        })
                    });

                    if (!promptResponse.ok) {
                        throw new Error('Failed to generate image prompt');
                    }

                    const promptData = await promptResponse.json();
                    const imagePrompt = promptData.response.choices[0].message.content;

                    // Generate and save NPC image
                    const npcImageResponse = await fetch('/api/generate-image', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            prompt: imagePrompt,
                            areaId: `npc_${gameData.nextNPCId}`,
                            width: 576,
                            height: 1024
                        })
                    });

                    if (!npcImageResponse.ok) {
                        throw new Error('Failed to generate NPC image');
                    }

                    const imageData = await npcImageResponse.json();
                    if (!imageData.success) {
                        throw new Error(imageData.error || 'Failed to generate image');
                    }

                    // Create NPC object
                    const newNPC = {
                        id: gameData.nextNPCId,
                        data: npcData,
                        imageUrl: imageData.imageUrl.startsWith('/') ? imageData.imageUrl : `/${imageData.imageUrl}`
                    };

                    // Add NPC to current area
                    const currentAreaNPCs = gameData.areaNPCs.get(gameData.currentLocation.title) || [];
                    if (currentAreaNPCs.length < 2) { // Max 2 NPCs per area
                        gameData.areaNPCs.set(gameData.currentLocation.title, [...currentAreaNPCs, newNPC]);
                        gameData.nextNPCId++;
                        window.saveGameState(gameData);
                        displayCurrentLocation();
                        window.showNothingFound(`You found a survivor: ${npcData.name}`);
                    } else {
                        window.showNothingFound('This area already has the maximum number of survivors.');
                    }

                    window.hideLoading();

                } catch (error) {
                    console.error('Error in discoverNPC:', error);
                    window.hideLoading();
                    window.showNothingFound(`Error: ${error.message}`);
                }
            }

            sleepButton.addEventListener('click', () => {
                if (gameData.stats.stamina >= 100) {
                    window.showNothingFound('Your stamina is already full');
                    return;
                }

                window.showLoading('Sleeping', 'Resting to restore stamina...');
                
                // Restore random amount of stamina (20-30)
                const staminaRestored = Math.floor(Math.random() * 11) + 20;
                gameData.stats.stamina = Math.min(100, gameData.stats.stamina + staminaRestored);
                
                advanceTime(1); // Sleeping takes 1 hour
                updateStatsDisplay();
                
                window.hideLoading();
                window.showNothingFound(`You rested and restored ${staminaRestored} stamina`);
            });

            searchFoodButton.addEventListener('click', () => {
                // Check stamina
                if (gameData.stats.stamina < 10) {
                    window.showNothingFound('Not enough stamina to search for food (10 stamina required)');
                    return;
                }

                window.showLoading('Searching for Food', 'Looking for edible items in the area...');
                
                // Consume stamina
                gameData.stats.stamina -= 10;
                
                // Random chance to find food (0-50)
                const foodFound = Math.floor(Math.random() * 51);
                gameData.stats.hunger = Math.min(100, gameData.stats.hunger + foodFound);
                
                advanceTime(1); // Searching takes 1 hour
                updateStatsDisplay();
                
                window.hideLoading();
                if (foodFound > 0) {
                    window.showNothingFound(`You found some food and restored ${foodFound} hunger`);
                } else {
                    window.showNothingFound('You searched but found no food');
                }
            });

            searchWaterButton.addEventListener('click', () => {
                // Check stamina
                if (gameData.stats.stamina < 10) {
                    window.showNothingFound('Not enough stamina to search for water (10 stamina required)');
                    return;
                }

                window.showLoading('Searching for Water', 'Looking for drinkable water in the area...');
                
                // Consume stamina
                gameData.stats.stamina -= 10;
                
                // Random chance to find water (0-50)
                const waterFound = Math.floor(Math.random() * 51);
                gameData.stats.thirst = Math.min(100, gameData.stats.thirst + waterFound);
                
                advanceTime(1); // Searching takes 1 hour
                updateStatsDisplay();
                
                window.hideLoading();
                if (waterFound > 0) {
                    window.showNothingFound(`You found some water and restored ${waterFound} thirst`);
                } else {
                    window.showNothingFound('You searched but found no water');
                }
            });

            startButton.addEventListener('click', async () => {
                // Validate form
                const formInputs = playerForm.querySelectorAll('input[required], select[required], textarea[required]');
                let isValid = true;
                formInputs.forEach(input => {
                    if (!input.value.trim()) {
                        isValid = false;
                        input.style.borderColor = '#ff4444';
                    } else {
                        input.style.borderColor = '';
                    }
                });

                if (!isValid) {
                    alert('Please fill in all required fields');
                    return;
                }

                // Create player character data
                const playerCharacter = {
                    name: document.getElementById('playerName').value,
                    description: document.getElementById('playerBackground').value,
                    attributes: {
                        STR: parseInt(document.getElementById('playerSTR').value),
                        DEX: parseInt(document.getElementById('playerDEX').value),
                        CON: parseInt(document.getElementById('playerCON').value),
                        INT: parseInt(document.getElementById('playerINT').value),
                        WIS: parseInt(document.getElementById('playerWIS').value),
                        CHA: parseInt(document.getElementById('playerCHA').value),
                        gender: document.getElementById('playerGender').value,
                        age: document.getElementById('playerAge').value,
                        bodyType: document.getElementById('playerBodyType').value,
                        eyeColor: document.getElementById('playerEyeColor').value,
                        hairColor: document.getElementById('playerHairColor').value,
                        ethnicity: document.getElementById('playerEthnicity').value,
                        clothing: document.getElementById('playerClothing').value,
                        weapon: document.getElementById('playerWeapon').value,
                        personality: document.getElementById('playerPersonality').value,
                        height: document.getElementById('playerHeight').value,
                        weight: document.getElementById('playerWeight').value
                    },
                    background: document.getElementById('playerBackground').value,
                    additionalDetails: document.getElementById('playerAdditionalDetails').value,
                    imageUrl: playerPreviewImage.src
                };

                // Save player character data to game state
                gameData.playerCharacter = playerCharacter;
                window.saveGameState(gameData);

                // Update player character display
                updatePlayerCharacterDisplay();

                startScreen.style.display = 'none';
                gameState.style.display = 'block';
                await generateInitialLocation();
                advanceTime(1);
            });

            resetButton.addEventListener('click', async () => {
                if (confirm('Are you sure you want to reset the game? All progress will be lost.')) {
                    // Clear localStorage
                    localStorage.removeItem('survivalGameState');
                    
                    // Clear all game data
                    gameData = {
                        currentLocation: null,
                        visitedLocations: new Map(),
                        discoveredAreas: new Map(),
                        areaConnections: new Map(),
                        linkPositions: new Map(),
                        areaNPCs: new Map(),
                        maxLinkedAreas: new Map(),
                        nextAreaId: 1,
                        nextNPCId: 1,
                        daysSurvived: 0,
                        currentTime: { hours: 8, minutes: 0 },
                        worldDescription: 'A world ravaged by disaster, where survival is a daily struggle. The environment is harsh, resources are scarce, and danger lurks around every corner.',
                        stats: {
                            health: 100,
                            hunger: 100,
                            thirst: 100,
                            stamina: 100
                        },
                        playerCharacter: null,
                        difficulty: 1
                    };
                    
                    // Force reload the page after a short delay to ensure localStorage is cleared
                    setTimeout(() => {
                        window.location.reload();
                    }, 100);
                }
            });

            regenButton.addEventListener('click', async () => {
                if (!gameData.currentLocation) {
                    alert('No location selected. Please start the game first.');
                    return;
                }
                
                if (!confirm('Are you sure you want to regenerate the background? This will create a new image for the current location.')) {
                    return;
                }
                
                try {
                    window.showLoading('Regenerating Background', 'Creating a new visual representation of your current location...');
                    
                    const imageResponse = await fetch('/api/generate-image', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            prompt: `post-apocalyptic ${gameData.currentLocation.title}, detailed environment, dark atmosphere, realistic style`,
                            areaId: gameData.currentLocation.areaId
                        })
                    });

                    if (!imageResponse.ok) {
                        throw new Error('Failed to regenerate image');
                    }

                    const imageData = await imageResponse.json();
                    if (!imageData.success) {
                        throw new Error(imageData.error || 'Failed to generate image');
                    }
                    
                    // Ensure the image URL is properly formatted
                    const imageUrl = imageData.imageUrl.startsWith('/') ? imageData.imageUrl : `/${imageData.imageUrl}`;
                    
                    // Update the current location's image
                    gameData.currentLocation.imageUrl = imageUrl;
                    
                    // Update the visited locations map
                    if (gameData.visitedLocations.has(gameData.currentLocation.title)) {
                        const locationData = gameData.visitedLocations.get(gameData.currentLocation.title);
                        locationData.imageUrl = imageUrl;
                        gameData.visitedLocations.set(gameData.currentLocation.title, locationData);
                    }
                    
                    // Update the discovered areas
                    for (const [locationTitle, areas] of gameData.discoveredAreas.entries()) {
                        const updatedAreas = areas.map(area => {
                            if (area.title === gameData.currentLocation.title) {
                                return { ...area, imageUrl };
                            }
                            return area;
                        });
                        gameData.discoveredAreas.set(locationTitle, updatedAreas);
                    }

                    // Update the display immediately
                    const timestamp = new Date().getTime();
                    locationImage.src = imageUrl + `?t=${timestamp}`;

                    // Save state
                    window.saveGameState(gameData);

                    window.hideLoading();
                    window.showNothingFound('Background image regenerated successfully');

                } catch (error) {
                    console.error('Error regenerating image:', error);
                    window.hideLoading();
                    alert(`Error: ${error.message}\nPlease try again.`);
                }
            });

            function updateGameStats() {
                currentLocationSpan.textContent = gameData.currentLocation?.title || '-';
                locationsVisitedSpan.textContent = gameData.visitedLocations.size;
                daysSurvivedSpan.textContent = gameData.daysSurvived;
                currentTimeSpan.textContent = formatTime(gameData.currentTime.hours, gameData.currentTime.minutes);
                updateStatsDisplay();
                window.saveGameState(gameData);
            }

            async function generateInitialLocation() {
                try {
                    window.showLoading('Generating Initial Location', 'Creating your starting point in the post-apocalyptic world...');
                    
                    // Call Ollama API to generate location description
                    const response = await fetch('/api/generate-location', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            context: 'post-apocalyptic world',
                            previousLocations: []
                        })
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.details || 'Failed to generate location');
                    }

                    const locationData = await response.json();
                    
                    window.showLoading('Generating Location Image', 'Creating a visual representation of your surroundings...');
                    
                    // Generate and display location image
                    const imageResponse = await fetch('/api/generate-image', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            prompt: `post-apocalyptic ${locationData.title}, detailed environment, dark atmosphere, realistic style`,
                            areaId: gameData.nextAreaId
                        })
                    });

                    if (!imageResponse.ok) {
                        const errorData = await imageResponse.json();
                        throw new Error(errorData.details || 'Failed to generate image');
                    }

                    const imageData = await imageResponse.json();
                    if (!imageData.success) {
                        throw new Error(imageData.error || 'Failed to generate image');
                    }
                    
                    // Ensure the image URL is properly formatted
                    const imageUrl = imageData.imageUrl.startsWith('/') ? imageData.imageUrl : `/${imageData.imageUrl}`;

                    // Create initial area data
                    const initialArea = {
                        title: locationData.title,
                        description: locationData.description,
                        areaId: gameData.nextAreaId,
                        imageUrl: imageUrl
                    };

                    // Set as current location
                    gameData.currentLocation = initialArea;

                    // Store location data
                    gameData.visitedLocations.set(locationData.title, {
                        description: locationData.description,
                        imageUrl: imageUrl,
                        areaId: gameData.nextAreaId,
                        difficulty: Math.floor(Math.random() * (gameData.visitedLocations.size * 3)) + gameData.visitedLocations.size
                    });

                    // Initialize connections for the initial area
                    gameData.areaConnections.set(initialArea.title, []);
                    gameData.areaNPCs.set(initialArea.title, []);
                    
                    // Set random max linked areas (2-4) for the initial location
                    gameData.maxLinkedAreas.set(initialArea.title, Math.floor(Math.random() * 3) + 2);

                    // Increment area ID for next location
                    gameData.nextAreaId++;
                    gameData.daysSurvived++;

                    // Update game stats and save state
                    updateGameStats();
                    displayCurrentLocation();
                    window.saveGameState(gameData);

                    window.hideLoading();

                } catch (error) {
                    console.error('Error in generateInitialLocation:', error);
                    window.hideLoading();
                    window.showNothingFound(`Error: ${error.message}`);
                    // Reset to start screen on error
                    startScreen.style.display = 'flex';
                    gameState.style.display = 'none';
                }
            }

            async function generateNewLocation() {
                try {
                    // Check if we've reached the maximum number of linked areas
                    const currentMaxLinked = gameData.maxLinkedAreas.get(gameData.currentLocation.title);
                    const currentConnections = gameData.areaConnections.get(gameData.currentLocation.title) || [];
                    
                    if (currentConnections.length >= currentMaxLinked) {
                        window.showNothingFound('You have discovered all possible areas from this location.');
                        return;
                    }

                    window.showLoading('Exploring Surroundings', 'Searching for new locations in the post-apocalyptic world...');

                    // Call Ollama API to generate location description
                    const response = await fetch('/api/generate-location', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            context: 'post-apocalyptic world',
                            previousLocations: Array.from(gameData.visitedLocations.keys())
                        })
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.details || 'Failed to generate location');
                    }

                    const locationData = await response.json();
                    
                    window.showLoading('Generating Location Image', 'Creating a visual representation of the new area...');
                    
                    // Generate and display location image
                    const imageResponse = await fetch('/api/generate-image', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            prompt: `post-apocalyptic ${locationData.title}, detailed environment, dark atmosphere, realistic style`,
                            areaId: gameData.nextAreaId
                        })
                    });

                    if (!imageResponse.ok) {
                        const errorData = await imageResponse.json();
                        throw new Error(errorData.details || 'Failed to generate image');
                    }

                    const imageData = await imageResponse.json();
                    if (!imageData.success) {
                        throw new Error(imageData.error || 'Failed to generate image');
                    }
                    
                    // Ensure the image URL is properly formatted
                    const imageUrl = imageData.imageUrl.startsWith('/') ? imageData.imageUrl : `/${imageData.imageUrl}`;

                    // Create new area data
                    const newArea = {
                        title: locationData.title,
                        description: locationData.description,
                        areaId: gameData.nextAreaId,
                        imageUrl: imageUrl
                    };

                    // Store location data
                    gameData.visitedLocations.set(locationData.title, {
                        description: locationData.description,
                        imageUrl: imageUrl,
                        areaId: gameData.nextAreaId,
                        difficulty: Math.floor(Math.random() * (gameData.visitedLocations.size * 3)) + gameData.visitedLocations.size
                    });

                    // Create bidirectional connection between current and new area
                    if (gameData.currentLocation) {
                        const currentConnections = gameData.areaConnections.get(gameData.currentLocation.title) || [];
                        if (!currentConnections.some(area => area.title === newArea.title)) {
                            gameData.areaConnections.set(
                                gameData.currentLocation.title,
                                [...currentConnections, newArea]
                            );
                        }

                        const newConnections = gameData.areaConnections.get(newArea.title) || [];
                        if (!newConnections.some(area => area.title === gameData.currentLocation.title)) {
                            gameData.areaConnections.set(
                                newArea.title,
                                [...newConnections, gameData.currentLocation]
                            );
                        }
                        
                        // Set random max linked areas (2-4) for the new location
                        gameData.maxLinkedAreas.set(newArea.title, Math.floor(Math.random() * 3) + 2);
                    }

                    // Increment area ID for next location
                    gameData.nextAreaId++;
                    gameData.daysSurvived++;

                    // Update game stats and save state
                    updateGameStats();
                    displayDiscoveredAreas();
                    window.saveGameState(gameData);

                    window.hideLoading();

                    // Show success message
                    window.showNothingFound(`Discovered new area: ${newArea.title}`);

                    // Update explore button state
                    updateExploreButtonState();

                } catch (error) {
                    console.error('Error in generateNewLocation:', error);
                    window.hideLoading();
                    window.showNothingFound(`Error: ${error.message}`);
                }
            }

            function updateExploreButtonState() {
                if (!gameData.currentLocation) {
                    exploreButton.style.display = 'none';
                    return;
                }

                const currentMaxLinked = gameData.maxLinkedAreas.get(gameData.currentLocation.title);
                const currentConnections = gameData.areaConnections.get(gameData.currentLocation.title) || [];
                
                if (currentConnections.length >= currentMaxLinked) {
                    exploreButton.style.display = 'none';
                } else {
                    exploreButton.style.display = 'block';
                    exploreButton.title = `Explore surroundings (${currentConnections.length}/${currentMaxLinked} areas discovered)`;
                }
            }

            restartButton.addEventListener('click', () => {
                // Reset game state
                gameData = {
                    currentLocation: null,
                    visitedLocations: new Map(),
                    discoveredAreas: new Map(),
                    areaConnections: new Map(),
                    linkPositions: new Map(),
                    areaNPCs: new Map(),
                    maxLinkedAreas: new Map(),
                    nextAreaId: 1,
                    nextNPCId: 1,
                    daysSurvived: 0,
                    currentTime: { hours: 8, minutes: 0 },
                    worldDescription: 'A world ravaged by disaster, where survival is a daily struggle. The environment is harsh, resources are scarce, and danger lurks around every corner.',
                    stats: {
                        health: 100,
                        hunger: 100,
                        thirst: 100,
                        stamina: 100
                    },
                    playerCharacter: null,
                    difficulty: 1
                };
                
                // Hide game over screen and show start screen
                gameOverScreen.style.display = 'none';
                startScreen.style.display = 'flex';
                gameState.style.display = 'none';
                
                // Reset stats display
                updateStatsDisplay();
            });

            menuToggle.addEventListener('click', () => {
                sidebar.classList.toggle('active');
                menuToggle.textContent = sidebar.classList.contains('active') ? '✕' : '☰';
            });

            // Close sidebar when clicking outside on mobile
            document.addEventListener('click', (e) => {
                if (window.innerWidth <= 768 && 
                    !sidebar.contains(e.target) && 
                    !menuToggle.contains(e.target) && 
                    sidebar.classList.contains('active')) {
                    sidebar.classList.remove('active');
                    menuToggle.textContent = '☰';
                }
            });

            // Handle window resize
            window.addEventListener('resize', () => {
                if (window.innerWidth > 768) {
                    sidebar.classList.remove('active');
                    menuToggle.textContent = '☰';
                }
            });

            // Add description toggle functionality
            const descriptionToggle = document.getElementById('descriptionToggle');
            const locationInfo = document.querySelector('.location-info');

            descriptionToggle.addEventListener('click', () => {
                locationInfo.classList.toggle('hidden');
                descriptionToggle.textContent = locationInfo.classList.contains('hidden') ? '📄' : '📝';
                descriptionToggle.title = locationInfo.classList.contains('hidden') ? 'Show Description' : 'Hide Description';
            });

            // Close modal when clicking the close button
            document.querySelector('.npc-modal-close').addEventListener('click', () => {
                document.getElementById('npcModal').style.display = 'none';
            });

            // Close modal when clicking outside
            document.getElementById('npcModal').addEventListener('click', (e) => {
                if (e.target === document.getElementById('npcModal')) {
                    document.getElementById('npcModal').style.display = 'none';
                }
            });

            // Add character creation form event listeners
            const playerForm = document.querySelector('.character-form');
            const generateCharacterButton = document.getElementById('generateCharacterButton');
            const playerPreviewImage = document.getElementById('playerPreviewImage');
            const playerPreviewName = document.getElementById('playerPreviewName');
            const playerPreviewDescription = document.getElementById('playerPreviewDescription');

            // Function to calculate and update total attribute points
            function updateTotalAttributePoints() {
                const str = parseInt(document.getElementById('playerSTR').value);
                const dex = parseInt(document.getElementById('playerDEX').value);
                const con = parseInt(document.getElementById('playerCON').value);
                const int = parseInt(document.getElementById('playerINT').value);
                const wis = parseInt(document.getElementById('playerWIS').value);
                const cha = parseInt(document.getElementById('playerCHA').value);
                
                const total = str + dex + con + int + wis + cha;
                document.getElementById('totalAttributePoints').textContent = total;
                
                // Disable/enable start button based on total points
                const startButton = document.getElementById('startButton');
                startButton.disabled = total !== 15;
                startButton.title = total !== 15 ? `Total points must be exactly 15 (current: ${total})` : 'Start Game';
            }

            // Update attribute value displays and total points
            const attributeSliders = document.querySelectorAll('.attribute-slider');
            attributeSliders.forEach(slider => {
                const valueDisplay = document.getElementById(`${slider.id}Value`);
                valueDisplay.textContent = slider.value;
                slider.addEventListener('input', () => {
                    valueDisplay.textContent = slider.value;
                    updateTotalAttributePoints();
                });
            });

            // Initial update of total points
            updateTotalAttributePoints();

            // Generate random character
            generateCharacterButton.addEventListener('click', async () => {
                try {
                    window.showLoading('Generating Character', 'Creating a unique character for you...');

                    const response = await fetch('/api/ollama', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            prompt: 'Generate a post-apocalyptic survivor character with D&D-style attributes',
                            model: window.config.defaultOllamaModel,
                            role: 'character_builder',
                            stream: false
                        })
                    });

                    if (!response.ok) {
                        throw new Error('Failed to generate character');
                    }

                    const characterData = await response.json();
                    const npcData = JSON.parse(characterData.response.choices[0].message.content);

                    // Update form fields with generated character data
                    document.getElementById('playerName').value = npcData.name;
                    document.getElementById('playerGender').value = npcData.attributes.gender;
                    document.getElementById('playerAge').value = npcData.attributes.age;
                    document.getElementById('playerBodyType').value = npcData.attributes.bodyType;
                    document.getElementById('playerEyeColor').value = npcData.attributes.eyeColor;
                    document.getElementById('playerHairColor').value = npcData.attributes.hairColor;
                    document.getElementById('playerEthnicity').value = npcData.attributes.ethnicity;
                    document.getElementById('playerClothing').value = npcData.attributes.clothing;
                    document.getElementById('playerWeapon').value = npcData.attributes.weapon;
                    document.getElementById('playerPersonality').value = npcData.attributes.personality;
                    document.getElementById('playerHeight').value = npcData.attributes.height;
                    document.getElementById('playerWeight').value = npcData.attributes.weight;
                    document.getElementById('playerBackground').value = npcData.background;
                    document.getElementById('playerAdditionalDetails').value = npcData.additionalDetails;

                    // Update attribute sliders
                    document.getElementById('playerSTR').value = npcData.attributes.STR;
                    document.getElementById('playerDEX').value = npcData.attributes.DEX;
                    document.getElementById('playerCON').value = npcData.attributes.CON;
                    document.getElementById('playerINT').value = npcData.attributes.INT;
                    document.getElementById('playerWIS').value = npcData.attributes.WIS;
                    document.getElementById('playerCHA').value = npcData.attributes.CHA;

                    // Update attribute value displays
                    document.getElementById('playerSTRValue').textContent = npcData.attributes.STR;
                    document.getElementById('playerDEXValue').textContent = npcData.attributes.DEX;
                    document.getElementById('playerCONValue').textContent = npcData.attributes.CON;
                    document.getElementById('playerINTValue').textContent = npcData.attributes.INT;
                    document.getElementById('playerWISValue').textContent = npcData.attributes.WIS;
                    document.getElementById('playerCHAValue').textContent = npcData.attributes.CHA;

                    // Update preview
                    playerPreviewName.textContent = npcData.name;
                    playerPreviewDescription.textContent = npcData.description;

                    // Generate character image
                    const promptResponse = await fetch('/api/ollama', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            prompt: JSON.stringify(npcData),
                            model: window.config.defaultOllamaModel,
                            role: 'sd-prompt',
                            stream: false
                        })
                    });

                    if (!promptResponse.ok) {
                        throw new Error('Failed to generate image prompt');
                    }

                    const promptData = await promptResponse.json();
                    const imagePrompt = promptData.response.choices[0].message.content;

                    const imageResponse = await fetch('/api/generate-image', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            prompt: imagePrompt,
                            areaId: 'player_character',
                            width: 576,
                            height: 1024
                        })
                    });

                    if (!imageResponse.ok) {
                        throw new Error('Failed to generate character image');
                    }

                    const imageData = await imageResponse.json();
                    if (!imageData.success) {
                        throw new Error(imageData.error || 'Failed to generate image');
                    }

                    const timestamp = new Date().getTime();
                    playerPreviewImage.src = (imageData.imageUrl.startsWith('/') ? imageData.imageUrl : `/${imageData.imageUrl}`) + `?t=${timestamp}`;

                    window.hideLoading();
                } catch (error) {
                    console.error('Error generating character:', error);
                    window.hideLoading();
                    alert(`Error: ${error.message}\nPlease try again.`);
                }
            });

            // Add player character display update
            function updatePlayerCharacterDisplay() {
                const playerCharacter = gameData.playerCharacter;
                if (!playerCharacter) return;

                const playerCharacterElement = document.getElementById('playerCharacter');
                if (!playerCharacterElement) return;

                playerCharacterElement.style.display = 'block';

                const imageElement = document.getElementById('playerCharacterImage');
                const nameElement = document.getElementById('playerCharacterName');
                const strElement = document.getElementById('playerCharacterSTR');
                const dexElement = document.getElementById('playerCharacterDEX');
                const conElement = document.getElementById('playerCharacterCON');
                const intElement = document.getElementById('playerCharacterINT');
                const wisElement = document.getElementById('playerCharacterWIS');
                const chaElement = document.getElementById('playerCharacterCHA');
                const descriptionElement = document.getElementById('playerCharacterDescription');

                if (imageElement) imageElement.src = playerCharacter.imageUrl;
                if (nameElement) nameElement.textContent = playerCharacter.name;
                if (strElement) strElement.textContent = playerCharacter.attributes.STR;
                if (dexElement) dexElement.textContent = playerCharacter.attributes.DEX;
                if (conElement) conElement.textContent = playerCharacter.attributes.CON;
                if (intElement) intElement.textContent = playerCharacter.attributes.INT;
                if (wisElement) wisElement.textContent = playerCharacter.attributes.WIS;
                if (chaElement) chaElement.textContent = playerCharacter.attributes.CHA;
                if (descriptionElement) descriptionElement.textContent = playerCharacter.description;
            }

            // Update loadGameState to properly handle player character data
            window.loadGameState = function() {
                try {
                    const savedState = localStorage.getItem('survivalGameState');
                    if (savedState) {
                        const parsed = JSON.parse(savedState);
                        // Initialize Maps from saved data
                        const visitedLocations = new Map(Object.entries(parsed.visitedLocations || {}));
                        const discoveredAreas = new Map(Object.entries(parsed.discoveredAreas || {}));
                        const areaConnections = new Map(Object.entries(parsed.areaConnections || {}));
                        const linkPositions = new Map(Object.entries(parsed.linkPositions || {}));
                        const areaNPCs = new Map(Object.entries(parsed.areaNPCs || {}));
                        const maxLinkedAreas = new Map(Object.entries(parsed.maxLinkedAreas || {}));
                        
                        // Create the game state object
                        const gameState = {
                            currentLocation: parsed.currentLocation || null,
                            visitedLocations,
                            discoveredAreas,
                            areaConnections,
                            linkPositions,
                            areaNPCs,
                            maxLinkedAreas,
                            nextAreaId: parsed.nextAreaId || 1,
                            nextNPCId: parsed.nextNPCId || 1,
                            daysSurvived: parsed.daysSurvived || 0,
                            currentTime: parsed.currentTime || { hours: 8, minutes: 0 },
                            worldDescription: parsed.worldDescription || 'A world ravaged by disaster, where survival is a daily struggle. The environment is harsh, resources are scarce, and danger lurks around every corner.',
                            stats: parsed.stats || {
                                health: 100,
                                hunger: 100,
                                thirst: 100,
                                stamina: 100
                            },
                            playerCharacter: parsed.playerCharacter || null,
                            difficulty: parsed.difficulty || 1
                        };

                        return gameState;
                    }
                } catch (error) {
                    console.error('Error loading game state:', error);
                }
                
                // Return default state if loading fails
                return {
                    currentLocation: null,
                    visitedLocations: new Map(),
                    discoveredAreas: new Map(),
                    areaConnections: new Map(),
                    linkPositions: new Map(),
                    areaNPCs: new Map(),
                    maxLinkedAreas: new Map(),
                    nextAreaId: 1,
                    nextNPCId: 1,
                    daysSurvived: 0,
                    currentTime: { hours: 8, minutes: 0 },
                    worldDescription: 'A world ravaged by disaster, where survival is a daily struggle. The environment is harsh, resources are scarce, and danger lurks around every corner.',
                    stats: {
                        health: 100,
                        hunger: 100,
                        thirst: 100,
                        stamina: 100
                    },
                    playerCharacter: null,
                    difficulty: 1
                };
            };

            // Add player character modal functionality
            window.showPlayerDetails = function() {
                const gameData = window.loadGameState();
                if (!gameData.playerCharacter) return;

                const modal = document.getElementById('playerModal');
                const modalImage = modal.querySelector('.npc-modal-image img');
                const modalName = modal.querySelector('.npc-modal-name');
                const modalDescription = modal.querySelector('.npc-modal-description');
                const modalAttributes = modal.querySelector('.npc-modal-attributes');
                const modalBackground = modal.querySelector('.npc-modal-background');
                const modalAdditional = modal.querySelector('.npc-modal-additional');
                const modalRegen = modal.querySelector('.npc-modal-regen');

                modalImage.src = gameData.playerCharacter.imageUrl;
                modalImage.alt = gameData.playerCharacter.name;
                modalName.textContent = gameData.playerCharacter.name;
                modalDescription.textContent = gameData.playerCharacter.description;
                modalRegen.onclick = async (e) => {
                    e.stopPropagation();
                    try {
                        window.showLoading('Regenerating Player Image', 'Creating a new visual representation of your character...');
                        
                        // Generate a detailed prompt using Ollama's Stable Diffusion role
                        const promptResponse = await fetch('/api/ollama', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                prompt: JSON.stringify(gameData.playerCharacter),
                                model: window.config.defaultOllamaModel,
                                role: 'sd-prompt',
                                stream: false
                            })
                        });

                        if (!promptResponse.ok) {
                            throw new Error('Failed to generate image prompt');
                        }

                        const promptData = await promptResponse.json();
                        const imagePrompt = promptData.response.choices[0].message.content;

                        // Generate new image using the detailed prompt
                        const imageResponse = await fetch('/api/generate-image', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                prompt: imagePrompt,
                                areaId: 'player_character',
                                width: 576,
                                height: 1024
                            })
                        });

                        if (!imageResponse.ok) {
                            throw new Error('Failed to generate player image');
                        }

                        const imageData = await imageResponse.json();
                        if (!imageData.success) {
                            throw new Error(imageData.error || 'Failed to generate image');
                        }

                        // Update player character image URL with timestamp to prevent caching
                        const timestamp = new Date().getTime();
                        const newImageUrl = (imageData.imageUrl.startsWith('/') ? imageData.imageUrl : `/${imageData.imageUrl}`) + `?t=${timestamp}`;
                        
                        // Update the player character data
                        gameData.playerCharacter.imageUrl = newImageUrl;
                        
                        // Save the updated game state
                        window.saveGameState(gameData);
                        
                        // Update the modal image
                        modalImage.src = newImageUrl;
                        
                        // Update the player character display
                        updatePlayerCharacterDisplay();
                        
                        window.hideLoading();
                        window.showNothingFound('Player character image regenerated successfully');

                    } catch (error) {
                        console.error('Error regenerating player image:', error);
                        window.hideLoading();
                        window.showNothingFound(`Error: ${error.message}`);
                    }
                };

                // Clear previous attributes
                modalAttributes.innerHTML = '';

                // Add D&D-style attributes
                const dndAttributes = [
                    { key: 'STR', label: 'Strength', value: gameData.playerCharacter.attributes.STR },
                    { key: 'DEX', label: 'Dexterity', value: gameData.playerCharacter.attributes.DEX },
                    { key: 'CON', label: 'Constitution', value: gameData.playerCharacter.attributes.CON },
                    { key: 'INT', label: 'Intelligence', value: gameData.playerCharacter.attributes.INT },
                    { key: 'WIS', label: 'Wisdom', value: gameData.playerCharacter.attributes.WIS },
                    { key: 'CHA', label: 'Charisma', value: gameData.playerCharacter.attributes.CHA },
                    { key: 'clothing', label: 'Clothing', value: gameData.playerCharacter.attributes.clothing },
                    { key: 'weapon', label: 'Weapon', value: gameData.playerCharacter.attributes.weapon }
                ];

                // Add character attributes
                const characterAttributes = [
                    { key: 'gender', label: 'Gender', value: gameData.playerCharacter.attributes.gender },
                    { key: 'age', label: 'Age', value: gameData.playerCharacter.attributes.age },
                    { key: 'bodyType', label: 'Body Type', value: gameData.playerCharacter.attributes.bodyType },
                    { key: 'eyeColor', label: 'Eye Color', value: gameData.playerCharacter.attributes.eyeColor },
                    { key: 'hairColor', label: 'Hair Color', value: gameData.playerCharacter.attributes.hairColor },
                    { key: 'ethnicity', label: 'Ethnicity', value: gameData.playerCharacter.attributes.ethnicity },
                    { key: 'personality', label: 'Personality', value: gameData.playerCharacter.attributes.personality },
                    { key: 'height', label: 'Height', value: gameData.playerCharacter.attributes.height },
                    { key: 'weight', label: 'Weight', value: gameData.playerCharacter.attributes.weight }
                ];

                // Create D&D attributes section
                const dndSection = document.createElement('div');
                dndSection.className = 'npc-modal-section';
                dndSection.innerHTML = '<h4 class="npc-modal-section-title">Attributes</h4>';
                
                dndAttributes.forEach(attr => {
                    const attributeDiv = document.createElement('div');
                    attributeDiv.className = 'npc-modal-attribute';
                    const percentage = (attr.value / 20) * 100;
                    attributeDiv.innerHTML = `
                        <div class="npc-modal-attribute-label">${attr.label} (${attr.key})</div>
                        <div class="npc-modal-attribute-value">${attr.value}</div>
                    `;
                    dndSection.appendChild(attributeDiv);
                });

                // Create character attributes section
                const charSection = document.createElement('div');
                charSection.className = 'npc-modal-section';
                charSection.innerHTML = '<h4 class="npc-modal-section-title">Physical Characteristics</h4>';
                
                characterAttributes.forEach(attr => {
                    if (attr.value) {
                        const attributeDiv = document.createElement('div');
                        attributeDiv.className = 'npc-modal-attribute';
                        attributeDiv.innerHTML = `
                            <div class="npc-modal-attribute-label">${attr.label}</div>
                            <div class="npc-modal-attribute-value">${attr.value}</div>
                        `;
                        charSection.appendChild(attributeDiv);
                    }
                });

                // Add sections to modal
                modalAttributes.appendChild(dndSection);
                modalAttributes.appendChild(charSection);

                modalBackground.textContent = gameData.playerCharacter.background;
                modalAdditional.textContent = gameData.playerCharacter.additionalDetails;

                modal.style.display = 'flex';
            };

            // Close player modal when clicking the close button
            document.querySelector('#playerModal .npc-modal-close').addEventListener('click', () => {
                document.getElementById('playerModal').style.display = 'none';
            });

            // Close player modal when clicking outside
            document.getElementById('playerModal').addEventListener('click', (e) => {
                if (e.target === document.getElementById('playerModal')) {
                    document.getElementById('playerModal').style.display = 'none';
                }
            });
        });
    </script>
</body>
</html> 